[
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "selectinload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Numeric",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Index",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "MetaData",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "inspect",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Filter",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "aget_db",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "PageParams",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "PaginatedResponse",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "aget_db",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "PaginatedResponse",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "PageParams",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Filter",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "aget_db",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "PaginatedResponse",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "PageParams",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Filter",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "aget_db",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Filter",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Filter",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "aget_db",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.core.config",
        "description": "src.core.config",
        "isExtraImport": true,
        "detail": "src.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.core.config",
        "description": "src.core.config",
        "isExtraImport": true,
        "detail": "src.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.core.config",
        "description": "src.core.config",
        "isExtraImport": true,
        "detail": "src.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.core.config",
        "description": "src.core.config",
        "isExtraImport": true,
        "detail": "src.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.core.config",
        "description": "src.core.config",
        "isExtraImport": true,
        "detail": "src.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.core.config",
        "description": "src.core.config",
        "isExtraImport": true,
        "detail": "src.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.core.config",
        "description": "src.core.config",
        "isExtraImport": true,
        "detail": "src.core.config",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Self",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncGenerator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Self",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "create_async_engine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "async_sessionmaker",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "async_scoped_session",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "src.core.dependencies",
        "description": "src.core.dependencies",
        "isExtraImport": true,
        "detail": "src.core.dependencies",
        "documentation": {}
    },
    {
        "label": "CurrentUser",
        "importPath": "src.core.dependencies",
        "description": "src.core.dependencies",
        "isExtraImport": true,
        "detail": "src.core.dependencies",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "src.core.dependencies",
        "description": "src.core.dependencies",
        "isExtraImport": true,
        "detail": "src.core.dependencies",
        "documentation": {}
    },
    {
        "label": "CurrentUser",
        "importPath": "src.core.dependencies",
        "description": "src.core.dependencies",
        "isExtraImport": true,
        "detail": "src.core.dependencies",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "src.core.dependencies",
        "description": "src.core.dependencies",
        "isExtraImport": true,
        "detail": "src.core.dependencies",
        "documentation": {}
    },
    {
        "label": "CurrentUser",
        "importPath": "src.core.dependencies",
        "description": "src.core.dependencies",
        "isExtraImport": true,
        "detail": "src.core.dependencies",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "src.core.dependencies",
        "description": "src.core.dependencies",
        "isExtraImport": true,
        "detail": "src.core.dependencies",
        "documentation": {}
    },
    {
        "label": "CurrentUser",
        "importPath": "src.core.dependencies",
        "description": "src.core.dependencies",
        "isExtraImport": true,
        "detail": "src.core.dependencies",
        "documentation": {}
    },
    {
        "label": "parse_filters",
        "importPath": "src.core.query_parser",
        "description": "src.core.query_parser",
        "isExtraImport": true,
        "detail": "src.core.query_parser",
        "documentation": {}
    },
    {
        "label": "build_search_filters",
        "importPath": "src.core.query_parser",
        "description": "src.core.query_parser",
        "isExtraImport": true,
        "detail": "src.core.query_parser",
        "documentation": {}
    },
    {
        "label": "parse_filters",
        "importPath": "src.core.query_parser",
        "description": "src.core.query_parser",
        "isExtraImport": true,
        "detail": "src.core.query_parser",
        "documentation": {}
    },
    {
        "label": "build_search_filters",
        "importPath": "src.core.query_parser",
        "description": "src.core.query_parser",
        "isExtraImport": true,
        "detail": "src.core.query_parser",
        "documentation": {}
    },
    {
        "label": "parse_filters",
        "importPath": "src.core.query_parser",
        "description": "src.core.query_parser",
        "isExtraImport": true,
        "detail": "src.core.query_parser",
        "documentation": {}
    },
    {
        "label": "parse_filters",
        "importPath": "src.core.query_parser",
        "description": "src.core.query_parser",
        "isExtraImport": true,
        "detail": "src.core.query_parser",
        "documentation": {}
    },
    {
        "label": "build_search_filters",
        "importPath": "src.core.query_parser",
        "description": "src.core.query_parser",
        "isExtraImport": true,
        "detail": "src.core.query_parser",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "model_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "CoverageAreaCreate",
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "isExtraImport": true,
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "CoverageAreaUpdate",
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "isExtraImport": true,
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "CoverageAreaType",
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "isExtraImport": true,
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "TransformerCreate",
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "isExtraImport": true,
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "TransformerUpdate",
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "isExtraImport": true,
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "MeterCreate",
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "isExtraImport": true,
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "MeterUpdate",
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "isExtraImport": true,
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "ReadingCreate",
        "importPath": "src.apps.data.schemas",
        "description": "src.apps.data.schemas",
        "isExtraImport": true,
        "detail": "src.apps.data.schemas",
        "documentation": {}
    },
    {
        "label": "ReadingUpdate",
        "importPath": "src.apps.data.schemas",
        "description": "src.apps.data.schemas",
        "isExtraImport": true,
        "detail": "src.apps.data.schemas",
        "documentation": {}
    },
    {
        "label": "ReadingType",
        "importPath": "src.apps.data.schemas",
        "description": "src.apps.data.schemas",
        "isExtraImport": true,
        "detail": "src.apps.data.schemas",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database.models",
        "description": "src.database.models",
        "isExtraImport": true,
        "detail": "src.database.models",
        "documentation": {}
    },
    {
        "label": "TokenBlacklist",
        "importPath": "src.database.models",
        "description": "src.database.models",
        "isExtraImport": true,
        "detail": "src.database.models",
        "documentation": {}
    },
    {
        "label": "TokenBlacklist",
        "importPath": "src.database.models",
        "description": "src.database.models",
        "isExtraImport": true,
        "detail": "src.database.models",
        "documentation": {}
    },
    {
        "label": "Filter",
        "importPath": "src.database.models",
        "description": "src.database.models",
        "isExtraImport": true,
        "detail": "src.database.models",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database.models",
        "description": "src.database.models",
        "isExtraImport": true,
        "detail": "src.database.models",
        "documentation": {}
    },
    {
        "label": "TokenBlacklist",
        "importPath": "src.database.schemas",
        "description": "src.database.schemas",
        "isExtraImport": true,
        "detail": "src.database.schemas",
        "documentation": {}
    },
    {
        "label": "PageParams",
        "importPath": "src.database.pagination",
        "description": "src.database.pagination",
        "isExtraImport": true,
        "detail": "src.database.pagination",
        "documentation": {}
    },
    {
        "label": "PaginatedResponse",
        "importPath": "src.database.pagination",
        "description": "src.database.pagination",
        "isExtraImport": true,
        "detail": "src.database.pagination",
        "documentation": {}
    },
    {
        "label": "PageParams",
        "importPath": "src.database.pagination",
        "description": "src.database.pagination",
        "isExtraImport": true,
        "detail": "src.database.pagination",
        "documentation": {}
    },
    {
        "label": "PaginatedResponse",
        "importPath": "src.database.pagination",
        "description": "src.database.pagination",
        "isExtraImport": true,
        "detail": "src.database.pagination",
        "documentation": {}
    },
    {
        "label": "paginate_query",
        "importPath": "src.database.pagination",
        "description": "src.database.pagination",
        "isExtraImport": true,
        "detail": "src.database.pagination",
        "documentation": {}
    },
    {
        "label": "AuthService",
        "importPath": "src.core.auth",
        "description": "src.core.auth",
        "isExtraImport": true,
        "detail": "src.core.auth",
        "documentation": {}
    },
    {
        "label": "TokenPair",
        "importPath": "src.core.auth",
        "description": "src.core.auth",
        "isExtraImport": true,
        "detail": "src.core.auth",
        "documentation": {}
    },
    {
        "label": "AccessToken",
        "importPath": "src.core.auth",
        "description": "src.core.auth",
        "isExtraImport": true,
        "detail": "src.core.auth",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "secrets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "secrets",
        "description": "secrets",
        "detail": "secrets",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "PydanticBaseSettingsSource",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "SettingsConfigDict",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "HTTPBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "HTTPAuthorizationCredentials",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.apps.users.models",
        "description": "src.apps.users.models",
        "isExtraImport": true,
        "detail": "src.apps.users.models",
        "documentation": {}
    },
    {
        "label": "NotFoundError",
        "importPath": "core.exceptions",
        "description": "core.exceptions",
        "isExtraImport": true,
        "detail": "core.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFoundError",
        "importPath": "core.exceptions",
        "description": "core.exceptions",
        "isExtraImport": true,
        "detail": "core.exceptions",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "asynccontextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "current_task",
        "importPath": "asyncio",
        "description": "asyncio",
        "isExtraImport": true,
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "retry",
        "importPath": "tenacity",
        "description": "tenacity",
        "isExtraImport": true,
        "detail": "tenacity",
        "documentation": {}
    },
    {
        "label": "wait_fixed",
        "importPath": "tenacity",
        "description": "tenacity",
        "isExtraImport": true,
        "detail": "tenacity",
        "documentation": {}
    },
    {
        "label": "stop_after_attempt",
        "importPath": "tenacity",
        "description": "tenacity",
        "isExtraImport": true,
        "detail": "tenacity",
        "documentation": {}
    },
    {
        "label": "retry_if_exception_type",
        "importPath": "tenacity",
        "description": "tenacity",
        "isExtraImport": true,
        "detail": "tenacity",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "Alert",
        "kind": 6,
        "importPath": "src.apps.alerts.models",
        "description": "src.apps.alerts.models",
        "peekOfCode": "class Alert(Base[AlertCreate, AlertUpdate]):\n    __tablename__ = f\"{settings.API_NAME.lower()}__alerts\"\n    title: Mapped[str] = mapped_column(String(100), nullable=False)\n    message: Mapped[str] = mapped_column(Text, nullable=False)\n    status: Mapped[AlertStatus] = mapped_column(String(10), nullable=False)",
        "detail": "src.apps.alerts.models",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.apps.alerts.router",
        "description": "src.apps.alerts.router",
        "peekOfCode": "router = APIRouter(prefix=\"/alerts\", tags=[\"alerts\"])\n@router.get(\"/alerts/{alert_id}\", response_model=Alert)\nasync def get_alert(\n    alert_id: PyUUID,\n    db: AsyncSession = Depends(aget_db),\n    current_user: CurrentUser = Depends(get_current_user),\n):\n    return await AlertDB.get_by_id(db, alert_id)\n@router.get(\"/alerts\", response_model=PaginatedResponse[Alert])\nasync def get_alerts(",
        "detail": "src.apps.alerts.router",
        "documentation": {}
    },
    {
        "label": "AlertStatus",
        "kind": 6,
        "importPath": "src.apps.alerts.schemas",
        "description": "src.apps.alerts.schemas",
        "peekOfCode": "class AlertStatus(Enum):\n    INFO = \"info\"\n    WARNING = \"warning\"\n    ERROR = \"error\"\n    CRITICAL = \"critical\"\n    EXPIRED = \"expired\"\nclass AlertBase(BaseModel):\n    title: str\n    message: str\n    status: AlertStatus",
        "detail": "src.apps.alerts.schemas",
        "documentation": {}
    },
    {
        "label": "AlertBase",
        "kind": 6,
        "importPath": "src.apps.alerts.schemas",
        "description": "src.apps.alerts.schemas",
        "peekOfCode": "class AlertBase(BaseModel):\n    title: str\n    message: str\n    status: AlertStatus\nclass AlertCreate(AlertBase): ...\nclass AlertUpdate(BaseModel):\n    title: str | None = None\n    message: str | None = None\n    status: AlertStatus | None = None\nclass Alert(AlertBase):",
        "detail": "src.apps.alerts.schemas",
        "documentation": {}
    },
    {
        "label": "AlertCreate",
        "kind": 6,
        "importPath": "src.apps.alerts.schemas",
        "description": "src.apps.alerts.schemas",
        "peekOfCode": "class AlertCreate(AlertBase): ...\nclass AlertUpdate(BaseModel):\n    title: str | None = None\n    message: str | None = None\n    status: AlertStatus | None = None\nclass Alert(AlertBase):\n    id: str\n    created_at: datetime\n    updated_at: datetime",
        "detail": "src.apps.alerts.schemas",
        "documentation": {}
    },
    {
        "label": "AlertUpdate",
        "kind": 6,
        "importPath": "src.apps.alerts.schemas",
        "description": "src.apps.alerts.schemas",
        "peekOfCode": "class AlertUpdate(BaseModel):\n    title: str | None = None\n    message: str | None = None\n    status: AlertStatus | None = None\nclass Alert(AlertBase):\n    id: str\n    created_at: datetime\n    updated_at: datetime",
        "detail": "src.apps.alerts.schemas",
        "documentation": {}
    },
    {
        "label": "Alert",
        "kind": 6,
        "importPath": "src.apps.alerts.schemas",
        "description": "src.apps.alerts.schemas",
        "peekOfCode": "class Alert(AlertBase):\n    id: str\n    created_at: datetime\n    updated_at: datetime",
        "detail": "src.apps.alerts.schemas",
        "documentation": {}
    },
    {
        "label": "Meter",
        "kind": 6,
        "importPath": "src.apps.areas_trans_meters.models",
        "description": "src.apps.areas_trans_meters.models",
        "peekOfCode": "class Meter(Base[MeterCreate, MeterUpdate]):\n    __tablename__ = f\"{settings.API_NAME.lower()}__meters\"\n    name: Mapped[str] = mapped_column(String(100), nullable=False)\n    description: Mapped[str] = mapped_column(Text, nullable=False)\n    transformer_id: Mapped[PyUUID] = mapped_column(\n        ForeignKey(f\"{settings.API_NAME.lower()}__transformers.id\"), nullable=False\n    )\n    transformer: Mapped[\"Transformer\"] = relationship(\n        \"Transformer\", back_populates=\"meters\", remote_side=\"Transformer.id\"\n    )",
        "detail": "src.apps.areas_trans_meters.models",
        "documentation": {}
    },
    {
        "label": "Transformer",
        "kind": 6,
        "importPath": "src.apps.areas_trans_meters.models",
        "description": "src.apps.areas_trans_meters.models",
        "peekOfCode": "class Transformer(Base[TransformerCreate, TransformerUpdate]):\n    __tablename__ = f\"{settings.API_NAME.lower()}__transformers\"\n    name: Mapped[str] = mapped_column(String(100), nullable=False)\n    description: Mapped[str] = mapped_column(Text, nullable=False)\n    coverage_area_id: Mapped[PyUUID] = mapped_column(\n        ForeignKey(f\"{settings.API_NAME.lower()}__coverage_areas.id\"), nullable=False\n    )\n    coverage_area: Mapped[\"CoverageArea\"] = relationship(\n        \"CoverageArea\", back_populates=\"transformers\", remote_side=\"CoverageArea.id\"\n    )",
        "detail": "src.apps.areas_trans_meters.models",
        "documentation": {}
    },
    {
        "label": "CoverageArea",
        "kind": 6,
        "importPath": "src.apps.areas_trans_meters.models",
        "description": "src.apps.areas_trans_meters.models",
        "peekOfCode": "class CoverageArea(Base[CoverageAreaCreate, CoverageAreaUpdate]):\n    __tablename__ = f\"{settings.API_NAME.lower()}__coverage_areas\"\n    type: Mapped[CoverageAreaType] = mapped_column(String(15), nullable=False)\n    name: Mapped[str] = mapped_column(String(100), nullable=False)\n    description: Mapped[str] = mapped_column(Text, nullable=False)\n    parent_id: Mapped[Optional[PyUUID]] = mapped_column(\n        ForeignKey(f\"{settings.API_NAME.lower()}__coverage_areas.id\"), nullable=True\n    )\n    parent_area: Mapped[Optional[\"CoverageArea\"]] = relationship(\n        \"CoverageArea\", back_populates=\"sub_areas\", remote_side=\"CoverageArea.id\"",
        "detail": "src.apps.areas_trans_meters.models",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.apps.areas_trans_meters.router",
        "description": "src.apps.areas_trans_meters.router",
        "peekOfCode": "router = APIRouter(prefix=\"/arsenal\", tags=[\"Areas, Transformers, Meters\"])\n@router.get(\"/coverage-area/{id}\", response_model=CoverageArea)\nasync def get_coverage_area(\n    id: PyUUID = Path(..., description=\"The ID of the coverage area\"),\n    db: AsyncSession = Depends(aget_db),\n    current_user: CurrentUser = Depends(get_current_user),\n):\n    coverage_area = await CoverageAreaDB.get_by_id(db, id)\n    if not coverage_area:\n        raise HTTPException(",
        "detail": "src.apps.areas_trans_meters.router",
        "documentation": {}
    },
    {
        "label": "TransformerBase",
        "kind": 6,
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "peekOfCode": "class TransformerBase(BaseModel):\n    name: str\n    description: str\nclass TransformerCreate(TransformerBase):\n    coverage_area_id: PyUUID\nclass TransformerUpdate(BaseModel):\n    name: Optional[str] = None\n    description: Optional[str] = None\n    coverage_area_id: Optional[PyUUID] = None\nclass Transformer(TransformerBase):",
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "TransformerCreate",
        "kind": 6,
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "peekOfCode": "class TransformerCreate(TransformerBase):\n    coverage_area_id: PyUUID\nclass TransformerUpdate(BaseModel):\n    name: Optional[str] = None\n    description: Optional[str] = None\n    coverage_area_id: Optional[PyUUID] = None\nclass Transformer(TransformerBase):\n    id: PyUUID\n    num_meters: int\n    created_at: datetime",
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "TransformerUpdate",
        "kind": 6,
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "peekOfCode": "class TransformerUpdate(BaseModel):\n    name: Optional[str] = None\n    description: Optional[str] = None\n    coverage_area_id: Optional[PyUUID] = None\nclass Transformer(TransformerBase):\n    id: PyUUID\n    num_meters: int\n    created_at: datetime\n    updated_at: datetime\n    class Config:",
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "Transformer",
        "kind": 6,
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "peekOfCode": "class Transformer(TransformerBase):\n    id: PyUUID\n    num_meters: int\n    created_at: datetime\n    updated_at: datetime\n    class Config:\n        from_attributes = True\nclass MeterBase(BaseModel):\n    name: str\n    description: str",
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "MeterBase",
        "kind": 6,
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "peekOfCode": "class MeterBase(BaseModel):\n    name: str\n    description: str\nclass MeterCreate(MeterBase):\n    coverage_area_id: PyUUID\nclass Meter(MeterBase):\n    id: PyUUID\n    created_at: datetime\n    updated_at: datetime\n    class Config:",
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "MeterCreate",
        "kind": 6,
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "peekOfCode": "class MeterCreate(MeterBase):\n    coverage_area_id: PyUUID\nclass Meter(MeterBase):\n    id: PyUUID\n    created_at: datetime\n    updated_at: datetime\n    class Config:\n        from_attributes = True\nclass MeterUpdate(BaseModel):\n    name: Optional[str] = None",
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "Meter",
        "kind": 6,
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "peekOfCode": "class Meter(MeterBase):\n    id: PyUUID\n    created_at: datetime\n    updated_at: datetime\n    class Config:\n        from_attributes = True\nclass MeterUpdate(BaseModel):\n    name: Optional[str] = None\n    description: Optional[str] = None\n    coverage_area_id: Optional[PyUUID] = None",
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "MeterUpdate",
        "kind": 6,
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "peekOfCode": "class MeterUpdate(BaseModel):\n    name: Optional[str] = None\n    description: Optional[str] = None\n    coverage_area_id: Optional[PyUUID] = None\nclass CoverageAreaType(Enum):\n    COUNTRY = \"country\"\n    PROVINCE = \"province\"\n    DISTRICT = \"district\"\n    SUB_DISTRICT = \"sub-district\"\n    VILLAGE = \"village\"",
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "CoverageAreaType",
        "kind": 6,
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "peekOfCode": "class CoverageAreaType(Enum):\n    COUNTRY = \"country\"\n    PROVINCE = \"province\"\n    DISTRICT = \"district\"\n    SUB_DISTRICT = \"sub-district\"\n    VILLAGE = \"village\"\nclass CoverageAreaBase(BaseModel):\n    type: CoverageAreaType\n    name: str\n    description: str",
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "CoverageAreaBase",
        "kind": 6,
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "peekOfCode": "class CoverageAreaBase(BaseModel):\n    type: CoverageAreaType\n    name: str\n    description: str\n    num_transformers: int\n    num_meters: int\nclass CoverageAreaCreate(CoverageAreaBase):\n    parent_id: Optional[PyUUID] = None\nclass CoverageAreaUpdate(BaseModel):\n    type: Optional[CoverageAreaType] = None",
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "CoverageAreaCreate",
        "kind": 6,
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "peekOfCode": "class CoverageAreaCreate(CoverageAreaBase):\n    parent_id: Optional[PyUUID] = None\nclass CoverageAreaUpdate(BaseModel):\n    type: Optional[CoverageAreaType] = None\n    name: Optional[str] = None\n    description: Optional[str] = None\n    parent_id: Optional[PyUUID] = None\n    num_transformers: Optional[int] = None\n    num_meters: Optional[int] = None\nclass CoverageArea(CoverageAreaBase):",
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "CoverageAreaUpdate",
        "kind": 6,
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "peekOfCode": "class CoverageAreaUpdate(BaseModel):\n    type: Optional[CoverageAreaType] = None\n    name: Optional[str] = None\n    description: Optional[str] = None\n    parent_id: Optional[PyUUID] = None\n    num_transformers: Optional[int] = None\n    num_meters: Optional[int] = None\nclass CoverageArea(CoverageAreaBase):\n    id: PyUUID\n    parent_id: Optional[PyUUID] = None",
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "CoverageArea",
        "kind": 6,
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "peekOfCode": "class CoverageArea(CoverageAreaBase):\n    id: PyUUID\n    parent_id: Optional[PyUUID] = None\n    created_at: datetime\n    updated_at: datetime\n    class Config:\n        from_attributes = True\nclass CoverageAreaWithSubAreas(CoverageAreaBase):\n    \"\"\"Coverage area with nested sub-areas\"\"\"\n    id: PyUUID",
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "CoverageAreaWithSubAreas",
        "kind": 6,
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "peekOfCode": "class CoverageAreaWithSubAreas(CoverageAreaBase):\n    \"\"\"Coverage area with nested sub-areas\"\"\"\n    id: PyUUID\n    parent_id: Optional[PyUUID] = None\n    sub_areas: List[\"CoverageAreaWithSubAreas\"] = []\n    created_at: datetime\n    updated_at: datetime\n    class Config:\n        from_attributes = True\nclass CoverageAreaWithParent(CoverageAreaBase):",
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "CoverageAreaWithParent",
        "kind": 6,
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "peekOfCode": "class CoverageAreaWithParent(CoverageAreaBase):\n    \"\"\"Coverage area with parent information\"\"\"\n    id: PyUUID\n    parent_id: Optional[PyUUID] = None\n    parent_area: Optional[\"CoverageArea\"] = None\n    created_at: datetime\n    updated_at: datetime\n    class Config:\n        from_attributes = True\nCoverageAreaWithSubAreas.model_rebuild()",
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "Reading",
        "kind": 6,
        "importPath": "src.apps.data.models",
        "description": "src.apps.data.models",
        "peekOfCode": "class Reading(Base[ReadingCreate, ReadingUpdate]):\n    \"\"\"\n    Unified readings table for all measurement types.\n    Partitioned by timestamp for optimal time-series performance.\n    \"\"\"\n    __tablename__ = f\"{settings.API_NAME.lower()}__readings\"\n    meter_id: Mapped[Optional[PyUUID]] = mapped_column(\n        ForeignKey(f\"{settings.API_NAME.lower()}__meters.id\"), nullable=True, index=True\n    )\n    transformer_id: Mapped[Optional[PyUUID]] = mapped_column(",
        "detail": "src.apps.data.models",
        "documentation": {}
    },
    {
        "label": "get_unit_for_type",
        "kind": 2,
        "importPath": "src.apps.data.router",
        "description": "src.apps.data.router",
        "peekOfCode": "def get_unit_for_type(reading_type: ReadingType) -> Optional[str]:\n    \"\"\"Get the standard unit for each reading type\"\"\"\n    unit_map = {\n        ReadingType.CURRENT: \"A\",\n        ReadingType.VOLTAGE: \"V\",\n        ReadingType.POWER: \"W\",\n        ReadingType.POWER_FACTOR: None,\n        ReadingType.TEMPERATURE: \"°C\",\n        ReadingType.ENERGY_CONSUMPTION: \"kWh\",\n    }",
        "detail": "src.apps.data.router",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.apps.data.router",
        "description": "src.apps.data.router",
        "peekOfCode": "router = APIRouter(prefix=\"/readings\", tags=[\"readings\"])\ndef get_unit_for_type(reading_type: ReadingType) -> Optional[str]:\n    \"\"\"Get the standard unit for each reading type\"\"\"\n    unit_map = {\n        ReadingType.CURRENT: \"A\",\n        ReadingType.VOLTAGE: \"V\",\n        ReadingType.POWER: \"W\",\n        ReadingType.POWER_FACTOR: None,\n        ReadingType.TEMPERATURE: \"°C\",\n        ReadingType.ENERGY_CONSUMPTION: \"kWh\",",
        "detail": "src.apps.data.router",
        "documentation": {}
    },
    {
        "label": "ReadingType",
        "kind": 6,
        "importPath": "src.apps.data.schemas",
        "description": "src.apps.data.schemas",
        "peekOfCode": "class ReadingType(str, Enum):\n    CURRENT = \"current\"\n    VOLTAGE = \"voltage\"\n    POWER = \"power\"\n    POWER_FACTOR = \"power_factor\"\n    TEMPERATURE = \"temperature\"\n    ENERGY_CONSUMPTION = \"energy_consumption\"\nclass BaseReading(BaseModel):\n    meter_id: PyUUID | None = None\n    transformer_id: PyUUID | None = None",
        "detail": "src.apps.data.schemas",
        "documentation": {}
    },
    {
        "label": "BaseReading",
        "kind": 6,
        "importPath": "src.apps.data.schemas",
        "description": "src.apps.data.schemas",
        "peekOfCode": "class BaseReading(BaseModel):\n    meter_id: PyUUID | None = None\n    transformer_id: PyUUID | None = None\n    value: float\n    timestamp: datetime\n    reading_type: ReadingType\n    is_estimated: bool = False\n    confidence_score: float | None = None\n    source_info: str | None = None\n    @model_validator(mode=\"after\")",
        "detail": "src.apps.data.schemas",
        "documentation": {}
    },
    {
        "label": "ReadingUpdate",
        "kind": 6,
        "importPath": "src.apps.data.schemas",
        "description": "src.apps.data.schemas",
        "peekOfCode": "class ReadingUpdate(BaseReading):\n    id: PyUUID\n    value: float | None = None  # type: ignore\nclass ReadingCreate(BaseReading): ...\nclass Reading(BaseReading):\n    id: PyUUID\n    created_at: datetime\n    updated_at: datetime",
        "detail": "src.apps.data.schemas",
        "documentation": {}
    },
    {
        "label": "ReadingCreate",
        "kind": 6,
        "importPath": "src.apps.data.schemas",
        "description": "src.apps.data.schemas",
        "peekOfCode": "class ReadingCreate(BaseReading): ...\nclass Reading(BaseReading):\n    id: PyUUID\n    created_at: datetime\n    updated_at: datetime",
        "detail": "src.apps.data.schemas",
        "documentation": {}
    },
    {
        "label": "Reading",
        "kind": 6,
        "importPath": "src.apps.data.schemas",
        "description": "src.apps.data.schemas",
        "peekOfCode": "class Reading(BaseReading):\n    id: PyUUID\n    created_at: datetime\n    updated_at: datetime",
        "detail": "src.apps.data.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "src.apps.users.models",
        "description": "src.apps.users.models",
        "peekOfCode": "class User(Base[UserCreate, UserUpdate]):\n    __tablename__ = f\"{settings.API_NAME.lower()}__users\"\n    hashed_key: Mapped[str] = mapped_column(String, unique=True, index=True, nullable=False)\n    email: Mapped[str] = mapped_column(String, unique=True, index=True, nullable=False)\n    first_name: Mapped[str] = mapped_column(String, nullable=False)\n    last_name: Mapped[str] = mapped_column(String, nullable=False)\n    other_names: Mapped[str] = mapped_column(String, nullable=True)\n    phone: Mapped[str] = mapped_column(String, nullable=True)\n    type: Mapped[UserType] = mapped_column(String, nullable=True)",
        "detail": "src.apps.users.models",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.apps.users.router",
        "description": "src.apps.users.router",
        "peekOfCode": "router = APIRouter(prefix=\"/auth\", tags=[\"authentication\"])\n@router.get(\"/me\", response_model=User)\nasync def current_user(current_user: CurrentUser = Depends(get_current_user)):\n    return current_user.db_user\n@router.get(\"/users\", response_model=PaginatedResponse[User])\nasync def get_users(\n    request: Request,\n    page_params: PageParams = Depends(),\n    db: AsyncSession = Depends(aget_db),\n    current_user: CurrentUser = Depends(get_current_user),",
        "detail": "src.apps.users.router",
        "documentation": {}
    },
    {
        "label": "UserType",
        "kind": 6,
        "importPath": "src.apps.users.schemas",
        "description": "src.apps.users.schemas",
        "peekOfCode": "class UserType(str, Enum):\n    ADMIN = \"admin\"\n    USER = \"user\"\nclass UserBase(BaseModel):\n    email: str\n    first_name: str\n    last_name: str\n    other_names: Optional[str] = None\n    phone: Optional[str] = None\n    type: Optional[UserType] = UserType.USER",
        "detail": "src.apps.users.schemas",
        "documentation": {}
    },
    {
        "label": "UserBase",
        "kind": 6,
        "importPath": "src.apps.users.schemas",
        "description": "src.apps.users.schemas",
        "peekOfCode": "class UserBase(BaseModel):\n    email: str\n    first_name: str\n    last_name: str\n    other_names: Optional[str] = None\n    phone: Optional[str] = None\n    type: Optional[UserType] = UserType.USER\nclass UserCreate(UserBase):\n    key: str\nclass UserUpdate(BaseModel):",
        "detail": "src.apps.users.schemas",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "kind": 6,
        "importPath": "src.apps.users.schemas",
        "description": "src.apps.users.schemas",
        "peekOfCode": "class UserCreate(UserBase):\n    key: str\nclass UserUpdate(BaseModel):\n    email: Optional[str] = None\n    first_name: Optional[str] = None\n    last_name: Optional[str] = None\n    type: Optional[UserType] = None\n    other_names: Optional[str] = None\n    phone: Optional[str] = None\nclass User(UserBase):",
        "detail": "src.apps.users.schemas",
        "documentation": {}
    },
    {
        "label": "UserUpdate",
        "kind": 6,
        "importPath": "src.apps.users.schemas",
        "description": "src.apps.users.schemas",
        "peekOfCode": "class UserUpdate(BaseModel):\n    email: Optional[str] = None\n    first_name: Optional[str] = None\n    last_name: Optional[str] = None\n    type: Optional[UserType] = None\n    other_names: Optional[str] = None\n    phone: Optional[str] = None\nclass User(UserBase):\n    id: str\n    created_at: datetime",
        "detail": "src.apps.users.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "src.apps.users.schemas",
        "description": "src.apps.users.schemas",
        "peekOfCode": "class User(UserBase):\n    id: str\n    created_at: datetime\n    updated_at: datetime\nclass LoginRequest(BaseModel):\n    key: str\nclass AccessTokenRefreshRequest(BaseModel):\n    refresh_token: str",
        "detail": "src.apps.users.schemas",
        "documentation": {}
    },
    {
        "label": "LoginRequest",
        "kind": 6,
        "importPath": "src.apps.users.schemas",
        "description": "src.apps.users.schemas",
        "peekOfCode": "class LoginRequest(BaseModel):\n    key: str\nclass AccessTokenRefreshRequest(BaseModel):\n    refresh_token: str",
        "detail": "src.apps.users.schemas",
        "documentation": {}
    },
    {
        "label": "AccessTokenRefreshRequest",
        "kind": 6,
        "importPath": "src.apps.users.schemas",
        "description": "src.apps.users.schemas",
        "peekOfCode": "class AccessTokenRefreshRequest(BaseModel):\n    refresh_token: str",
        "detail": "src.apps.users.schemas",
        "documentation": {}
    },
    {
        "label": "TokenType",
        "kind": 6,
        "importPath": "src.core.auth",
        "description": "src.core.auth",
        "peekOfCode": "class TokenType(str, Enum):\n    ACCESS = \"access\"\n    REFRESH = \"refresh\"\nclass TokenPair(BaseModel):\n    access_token: str\n    refresh_token: str\n    token_type: Literal[\"bearer\"] = \"bearer\"\n    access_expires_in: int = Field(..., description=\"Access token expires in seconds\")\n    refresh_expires_in: int = Field(..., description=\"Refresh token expires in seconds\")\nclass AccessToken(BaseModel):",
        "detail": "src.core.auth",
        "documentation": {}
    },
    {
        "label": "TokenPair",
        "kind": 6,
        "importPath": "src.core.auth",
        "description": "src.core.auth",
        "peekOfCode": "class TokenPair(BaseModel):\n    access_token: str\n    refresh_token: str\n    token_type: Literal[\"bearer\"] = \"bearer\"\n    access_expires_in: int = Field(..., description=\"Access token expires in seconds\")\n    refresh_expires_in: int = Field(..., description=\"Refresh token expires in seconds\")\nclass AccessToken(BaseModel):\n    access_token: str\n    token_type: Literal[\"bearer\"] = \"bearer\"\n    expires_in: int = Field(..., description=\"Access token expires in seconds\")",
        "detail": "src.core.auth",
        "documentation": {}
    },
    {
        "label": "AccessToken",
        "kind": 6,
        "importPath": "src.core.auth",
        "description": "src.core.auth",
        "peekOfCode": "class AccessToken(BaseModel):\n    access_token: str\n    token_type: Literal[\"bearer\"] = \"bearer\"\n    expires_in: int = Field(..., description=\"Access token expires in seconds\")\nclass RefreshToken(BaseModel):\n    refresh_token: str\n    token_type: Literal[\"bearer\"] = \"bearer\"\n    expires_in: int = Field(..., description=\"Refresh token expires in seconds\")\nclass AuthService:\n    \"\"\"",
        "detail": "src.core.auth",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "kind": 6,
        "importPath": "src.core.auth",
        "description": "src.core.auth",
        "peekOfCode": "class RefreshToken(BaseModel):\n    refresh_token: str\n    token_type: Literal[\"bearer\"] = \"bearer\"\n    expires_in: int = Field(..., description=\"Refresh token expires in seconds\")\nclass AuthService:\n    \"\"\"\n    Authentication service.\n    \"\"\"\n    @staticmethod\n    def verify_password(plain_password: str, hashed_password: str) -> bool:",
        "detail": "src.core.auth",
        "documentation": {}
    },
    {
        "label": "AuthService",
        "kind": 6,
        "importPath": "src.core.auth",
        "description": "src.core.auth",
        "peekOfCode": "class AuthService:\n    \"\"\"\n    Authentication service.\n    \"\"\"\n    @staticmethod\n    def verify_password(plain_password: str, hashed_password: str) -> bool:\n        \"\"\"\n        Verify a password.\n        Args:\n            plain_password: The plain password.",
        "detail": "src.core.auth",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "src.core.auth",
        "description": "src.core.auth",
        "peekOfCode": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\nclass TokenType(str, Enum):\n    ACCESS = \"access\"\n    REFRESH = \"refresh\"\nclass TokenPair(BaseModel):\n    access_token: str\n    refresh_token: str\n    token_type: Literal[\"bearer\"] = \"bearer\"\n    access_expires_in: int = Field(..., description=\"Access token expires in seconds\")\n    refresh_expires_in: int = Field(..., description=\"Refresh token expires in seconds\")",
        "detail": "src.core.auth",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "src.core.config",
        "description": "src.core.config",
        "peekOfCode": "class Settings(BaseSettings):\n    SECRET_KEY: str\n    ENVIRONMENT: Literal[\"development\", \"production\"] = \"production\"\n    API_VERSION: str\n    API_NAME: str = \"enerlytics\"\n    APOSTGRES_DATABASE_URL: str\n    GEMINI_API_KEY: str\n    LYTI_LLM: str\n    ACCESS_TOKEN_EXPIRE_HOURS: int = 24\n    REFRESH_TOKEN_EXPIRE_HOURS: int = 24 * 7",
        "detail": "src.core.config",
        "documentation": {}
    },
    {
        "label": "hash_key",
        "kind": 2,
        "importPath": "src.core.config",
        "description": "src.core.config",
        "peekOfCode": "def hash_key(key: str) -> str:\n    return hashlib.sha256(key.encode()).hexdigest()\nclass Settings(BaseSettings):\n    SECRET_KEY: str\n    ENVIRONMENT: Literal[\"development\", \"production\"] = \"production\"\n    API_VERSION: str\n    API_NAME: str = \"enerlytics\"\n    APOSTGRES_DATABASE_URL: str\n    GEMINI_API_KEY: str\n    LYTI_LLM: str",
        "detail": "src.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "src.core.config",
        "description": "src.core.config",
        "peekOfCode": "settings = Settings()  # type: ignore",
        "detail": "src.core.config",
        "documentation": {}
    },
    {
        "label": "CurrentUser",
        "kind": 6,
        "importPath": "src.core.dependencies",
        "description": "src.core.dependencies",
        "peekOfCode": "class CurrentUser(BaseModel):\n    db_user: UserDB\n    payload: Dict[str, Any]\nasync def get_current_user(\n    credentials: HTTPAuthorizationCredentials = Depends(security),\n    db: AsyncSession = Depends(aget_db),\n) -> CurrentUser:\n    \"\"\"\n    Get the current user from the database.\n    Args:",
        "detail": "src.core.dependencies",
        "documentation": {}
    },
    {
        "label": "security",
        "kind": 5,
        "importPath": "src.core.dependencies",
        "description": "src.core.dependencies",
        "peekOfCode": "security = HTTPBearer()\nclass CurrentUser(BaseModel):\n    db_user: UserDB\n    payload: Dict[str, Any]\nasync def get_current_user(\n    credentials: HTTPAuthorizationCredentials = Depends(security),\n    db: AsyncSession = Depends(aget_db),\n) -> CurrentUser:\n    \"\"\"\n    Get the current user from the database.",
        "detail": "src.core.dependencies",
        "documentation": {}
    },
    {
        "label": "NotFoundError",
        "kind": 6,
        "importPath": "src.core.exceptions",
        "description": "src.core.exceptions",
        "peekOfCode": "class NotFoundError(Exception):\n    def __init__(self, message: str):\n        self.message = message\n        super().__init__(self.message)\n    def __repr__(self) -> str:\n        return f\"({self.__class__.__name__}message={self.message})\"\n    def __str__(self) -> str:\n        return self.__repr__()",
        "detail": "src.core.exceptions",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "kind": 2,
        "importPath": "src.core.logging",
        "description": "src.core.logging",
        "peekOfCode": "def get_logger(name: str = __name__, level: str = \"INFO\") -> logging.Logger:\n    \"\"\"\n    Get a configured logger instance for the application.\n    Args:\n        name: Logger name, defaults to the calling module's name\n        level: Logging level (DEBUG, INFO, WARNING, ERROR, CRITICAL)\n    Returns:\n        Configured logger instance\n    \"\"\"\n    logger = logging.getLogger(name)",
        "detail": "src.core.logging",
        "documentation": {}
    },
    {
        "label": "QueryParser",
        "kind": 6,
        "importPath": "src.core.query_parser",
        "description": "src.core.query_parser",
        "peekOfCode": "class QueryParser:\n    \"\"\"\n    Parse complex query parameters into Filter objects.\n    Supports various formats:\n    - Simple: ?field=value\n    - With operator: ?field__operator=value\n    - Multiple values: ?field__in=value1,value2,value3\n    - Complex: ?field__between=10,20\n    \"\"\"\n    SUPPORTED_OPERATORS: List[OperatorType] = list(OperatorType.__args__)",
        "detail": "src.core.query_parser",
        "documentation": {}
    },
    {
        "label": "parse_filters",
        "kind": 2,
        "importPath": "src.core.query_parser",
        "description": "src.core.query_parser",
        "peekOfCode": "def parse_filters(\n    query_params: Dict[str, Any], allowed_fields: List[str]\n) -> List[Filter]:\n    \"\"\"Parse query parameters specifically for user filtering.\"\"\"\n    return QueryParser.parse_query_params(query_params, allowed_fields)\ndef build_search_filters(search_term: str, fields: List[str]) -> List[Filter]:\n    \"\"\"Build filters for searching across multiple fields.\"\"\"\n    if not search_term or not fields:\n        return []\n    return [",
        "detail": "src.core.query_parser",
        "documentation": {}
    },
    {
        "label": "build_search_filters",
        "kind": 2,
        "importPath": "src.core.query_parser",
        "description": "src.core.query_parser",
        "peekOfCode": "def build_search_filters(search_term: str, fields: List[str]) -> List[Filter]:\n    \"\"\"Build filters for searching across multiple fields.\"\"\"\n    if not search_term or not fields:\n        return []\n    return [\n        Filter(field=field, operator=\"ilike\", value=f\"%{search_term}%\")\n        for field in fields\n    ]",
        "detail": "src.core.query_parser",
        "documentation": {}
    },
    {
        "label": "OperatorType",
        "kind": 5,
        "importPath": "src.core.query_parser",
        "description": "src.core.query_parser",
        "peekOfCode": "OperatorType = Literal[\n    \"==\",\n    \"!=\",\n    \">\",\n    \">=\",\n    \"<\",\n    \"<=\",\n    \"in\",\n    \"not in\",\n    \"is\",",
        "detail": "src.core.query_parser",
        "documentation": {}
    },
    {
        "label": "DatabaseSessionManager",
        "kind": 6,
        "importPath": "src.database.asession",
        "description": "src.database.asession",
        "peekOfCode": "class DatabaseSessionManager:\n    def __init__(self, database_url: str):\n        self.engine = create_async_engine(\n            database_url,\n            pool_size=20,\n            max_overflow=10,\n            pool_timeout=30,\n            pool_recycle=60 * 30,\n            pool_pre_ping=True,\n            connect_args={",
        "detail": "src.database.asession",
        "documentation": {}
    },
    {
        "label": "asession_manager",
        "kind": 5,
        "importPath": "src.database.asession",
        "description": "src.database.asession",
        "peekOfCode": "asession_manager = DatabaseSessionManager(database_url=settings.APOSTGRES_DATABASE_URL)\nasync def aget_db() -> AsyncGenerator[AsyncSession, None]:\n    async with asession_manager.get_session() as session:\n        yield session",
        "detail": "src.database.asession",
        "documentation": {}
    },
    {
        "label": "Filter",
        "kind": 6,
        "importPath": "src.database.models",
        "description": "src.database.models",
        "peekOfCode": "class Filter(BaseModel):\n    field: str\n    operator: Literal[\n        \"==\",\n        \"!=\",\n        \">\",\n        \">=\",\n        \"<\",\n        \"<=\",\n        \"in\",",
        "detail": "src.database.models",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "src.database.models",
        "description": "src.database.models",
        "peekOfCode": "class Base(DeclarativeBase, Generic[CreateSchemaType, UpdateSchemaType]):\n    metadata = MetaData(naming_convention=naming_convention)\n    id: Mapped[PyUUID] = mapped_column(PGUUID, primary_key=True, default=uuid4)\n    created_at: Mapped[datetime] = mapped_column(\n        DateTime, default=datetime.now, nullable=False\n    )\n    updated_at: Mapped[datetime] = mapped_column(\n        DateTime,\n        default=datetime.now,\n        onupdate=datetime.now,",
        "detail": "src.database.models",
        "documentation": {}
    },
    {
        "label": "TokenBlacklist",
        "kind": 6,
        "importPath": "src.database.models",
        "description": "src.database.models",
        "peekOfCode": "class TokenBlacklist(Base[TokenBlacklistSchema, TokenBlacklistSchema]):\n    __tablename__ = f\"{settings.API_NAME.lower()}__token_blacklist\"\n    jti: Mapped[str] = mapped_column(String, unique=True, index=True, nullable=False)\n    token_type: Mapped[Literal[\"access\", \"refresh\"]] = mapped_column(\n        String, nullable=False\n    )\n    user_id: Mapped[str] = mapped_column(String, nullable=False)\n    blacklisted_at: Mapped[datetime] = mapped_column(\n        DateTime, default=datetime.now(timezone.utc)\n    )",
        "detail": "src.database.models",
        "documentation": {}
    },
    {
        "label": "naming_convention",
        "kind": 5,
        "importPath": "src.database.models",
        "description": "src.database.models",
        "peekOfCode": "naming_convention = {\n    \"ix\": \"ix_%(column_0_label)s\",\n    \"uq\": \"uq_%(table_name)s_%(column_0_name)s\",\n    \"ck\": \"ck_%(table_name)s_%(constraint_name)s\",\n    \"fk\": \"fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s\",\n    \"pk\": \"pk_%(table_name)s\",\n}\nCreateSchemaType = TypeVar(\"CreateSchemaType\", bound=BaseModel)\nUpdateSchemaType = TypeVar(\"UpdateSchemaType\", bound=BaseModel)\nclass Base(DeclarativeBase, Generic[CreateSchemaType, UpdateSchemaType]):",
        "detail": "src.database.models",
        "documentation": {}
    },
    {
        "label": "CreateSchemaType",
        "kind": 5,
        "importPath": "src.database.models",
        "description": "src.database.models",
        "peekOfCode": "CreateSchemaType = TypeVar(\"CreateSchemaType\", bound=BaseModel)\nUpdateSchemaType = TypeVar(\"UpdateSchemaType\", bound=BaseModel)\nclass Base(DeclarativeBase, Generic[CreateSchemaType, UpdateSchemaType]):\n    metadata = MetaData(naming_convention=naming_convention)\n    id: Mapped[PyUUID] = mapped_column(PGUUID, primary_key=True, default=uuid4)\n    created_at: Mapped[datetime] = mapped_column(\n        DateTime, default=datetime.now, nullable=False\n    )\n    updated_at: Mapped[datetime] = mapped_column(\n        DateTime,",
        "detail": "src.database.models",
        "documentation": {}
    },
    {
        "label": "UpdateSchemaType",
        "kind": 5,
        "importPath": "src.database.models",
        "description": "src.database.models",
        "peekOfCode": "UpdateSchemaType = TypeVar(\"UpdateSchemaType\", bound=BaseModel)\nclass Base(DeclarativeBase, Generic[CreateSchemaType, UpdateSchemaType]):\n    metadata = MetaData(naming_convention=naming_convention)\n    id: Mapped[PyUUID] = mapped_column(PGUUID, primary_key=True, default=uuid4)\n    created_at: Mapped[datetime] = mapped_column(\n        DateTime, default=datetime.now, nullable=False\n    )\n    updated_at: Mapped[datetime] = mapped_column(\n        DateTime,\n        default=datetime.now,",
        "detail": "src.database.models",
        "documentation": {}
    },
    {
        "label": "PaginatedResponse",
        "kind": 6,
        "importPath": "src.database.pagination",
        "description": "src.database.pagination",
        "peekOfCode": "class PaginatedResponse(BaseModel, Generic[T]):\n    items: List[T]\n    total: int\n    page: int\n    size: int\n    pages: int\n    has_next: bool\n    has_prev: bool\n    model_config = ConfigDict(from_attributes=True)\nclass PageParams:",
        "detail": "src.database.pagination",
        "documentation": {}
    },
    {
        "label": "PageParams",
        "kind": 6,
        "importPath": "src.database.pagination",
        "description": "src.database.pagination",
        "peekOfCode": "class PageParams:\n    def __init__(\n        self,\n        page: int = 1,\n        size: int = 100,\n        sort_by: Literal[\"created_at\", \"updated_at\"] | str = \"created_at\",\n        sort_order: Literal[\"asc\", \"desc\"] = \"desc\",\n    ):\n        if page < 1:\n            raise ValueError(\"Page number must be greater than 0\")",
        "detail": "src.database.pagination",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "src.database.pagination",
        "description": "src.database.pagination",
        "peekOfCode": "T = TypeVar(\"T\")\nclass PaginatedResponse(BaseModel, Generic[T]):\n    items: List[T]\n    total: int\n    page: int\n    size: int\n    pages: int\n    has_next: bool\n    has_prev: bool\n    model_config = ConfigDict(from_attributes=True)",
        "detail": "src.database.pagination",
        "documentation": {}
    },
    {
        "label": "TokenBlacklist",
        "kind": 6,
        "importPath": "src.database.schemas",
        "description": "src.database.schemas",
        "peekOfCode": "class TokenBlacklist(BaseModel):\n    jti: str\n    token_type: str\n    user_id: PyUUID\n    blacklisted_at: datetime\n    expires_at: datetime",
        "detail": "src.database.schemas",
        "documentation": {}
    }
]