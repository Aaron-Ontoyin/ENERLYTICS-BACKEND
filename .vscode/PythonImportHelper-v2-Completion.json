[
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "selectinload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "UniqueConstraint",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Numeric",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Index",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "CheckConstraint",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "PrimaryKeyConstraint",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "MetaData",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "inspect",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Filter",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "aget_db",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "PaginatedResponse",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "PageParams",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "aget_db",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "PaginatedResponse",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "PageParams",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Filter",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "aget_db",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "PaginatedResponse",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "PageParams",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Filter",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "aget_db",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Filter",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Filter",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "aget_db",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "aget_db",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "asession_manager",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.core.config",
        "description": "src.core.config",
        "isExtraImport": true,
        "detail": "src.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.core.config",
        "description": "src.core.config",
        "isExtraImport": true,
        "detail": "src.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.core.config",
        "description": "src.core.config",
        "isExtraImport": true,
        "detail": "src.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.core.config",
        "description": "src.core.config",
        "isExtraImport": true,
        "detail": "src.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.core.config",
        "description": "src.core.config",
        "isExtraImport": true,
        "detail": "src.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.core.config",
        "description": "src.core.config",
        "isExtraImport": true,
        "detail": "src.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.core.config",
        "description": "src.core.config",
        "isExtraImport": true,
        "detail": "src.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.core.config",
        "description": "src.core.config",
        "isExtraImport": true,
        "detail": "src.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.core.config",
        "description": "src.core.config",
        "isExtraImport": true,
        "detail": "src.core.config",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Self",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Self",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncGenerator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Self",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncGenerator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "create_async_engine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "async_sessionmaker",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "async_scoped_session",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "create_async_engine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "async_sessionmaker",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "sqlalchemy.exc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "MissingGreenlet",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "src.core.dependencies",
        "description": "src.core.dependencies",
        "isExtraImport": true,
        "detail": "src.core.dependencies",
        "documentation": {}
    },
    {
        "label": "CurrentUser",
        "importPath": "src.core.dependencies",
        "description": "src.core.dependencies",
        "isExtraImport": true,
        "detail": "src.core.dependencies",
        "documentation": {}
    },
    {
        "label": "get_page_params",
        "importPath": "src.core.dependencies",
        "description": "src.core.dependencies",
        "isExtraImport": true,
        "detail": "src.core.dependencies",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "src.core.dependencies",
        "description": "src.core.dependencies",
        "isExtraImport": true,
        "detail": "src.core.dependencies",
        "documentation": {}
    },
    {
        "label": "CurrentUser",
        "importPath": "src.core.dependencies",
        "description": "src.core.dependencies",
        "isExtraImport": true,
        "detail": "src.core.dependencies",
        "documentation": {}
    },
    {
        "label": "get_page_params",
        "importPath": "src.core.dependencies",
        "description": "src.core.dependencies",
        "isExtraImport": true,
        "detail": "src.core.dependencies",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "src.core.dependencies",
        "description": "src.core.dependencies",
        "isExtraImport": true,
        "detail": "src.core.dependencies",
        "documentation": {}
    },
    {
        "label": "CurrentUser",
        "importPath": "src.core.dependencies",
        "description": "src.core.dependencies",
        "isExtraImport": true,
        "detail": "src.core.dependencies",
        "documentation": {}
    },
    {
        "label": "get_readings_page_params",
        "importPath": "src.core.dependencies",
        "description": "src.core.dependencies",
        "isExtraImport": true,
        "detail": "src.core.dependencies",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "src.core.dependencies",
        "description": "src.core.dependencies",
        "isExtraImport": true,
        "detail": "src.core.dependencies",
        "documentation": {}
    },
    {
        "label": "CurrentUser",
        "importPath": "src.core.dependencies",
        "description": "src.core.dependencies",
        "isExtraImport": true,
        "detail": "src.core.dependencies",
        "documentation": {}
    },
    {
        "label": "get_current_user_refresh",
        "importPath": "src.core.dependencies",
        "description": "src.core.dependencies",
        "isExtraImport": true,
        "detail": "src.core.dependencies",
        "documentation": {}
    },
    {
        "label": "get_page_params",
        "importPath": "src.core.dependencies",
        "description": "src.core.dependencies",
        "isExtraImport": true,
        "detail": "src.core.dependencies",
        "documentation": {}
    },
    {
        "label": "parse_filters",
        "importPath": "src.core.query_parser",
        "description": "src.core.query_parser",
        "isExtraImport": true,
        "detail": "src.core.query_parser",
        "documentation": {}
    },
    {
        "label": "build_search_filters",
        "importPath": "src.core.query_parser",
        "description": "src.core.query_parser",
        "isExtraImport": true,
        "detail": "src.core.query_parser",
        "documentation": {}
    },
    {
        "label": "parse_filters",
        "importPath": "src.core.query_parser",
        "description": "src.core.query_parser",
        "isExtraImport": true,
        "detail": "src.core.query_parser",
        "documentation": {}
    },
    {
        "label": "build_search_filters",
        "importPath": "src.core.query_parser",
        "description": "src.core.query_parser",
        "isExtraImport": true,
        "detail": "src.core.query_parser",
        "documentation": {}
    },
    {
        "label": "parse_filters",
        "importPath": "src.core.query_parser",
        "description": "src.core.query_parser",
        "isExtraImport": true,
        "detail": "src.core.query_parser",
        "documentation": {}
    },
    {
        "label": "parse_filters",
        "importPath": "src.core.query_parser",
        "description": "src.core.query_parser",
        "isExtraImport": true,
        "detail": "src.core.query_parser",
        "documentation": {}
    },
    {
        "label": "build_search_filters",
        "importPath": "src.core.query_parser",
        "description": "src.core.query_parser",
        "isExtraImport": true,
        "detail": "src.core.query_parser",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "model_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "model_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "CoverageAreaCreate",
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "isExtraImport": true,
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "CoverageAreaUpdate",
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "isExtraImport": true,
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "CoverageAreaType",
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "isExtraImport": true,
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "TransformerCreate",
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "isExtraImport": true,
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "TransformerUpdate",
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "isExtraImport": true,
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "MeterCreate",
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "isExtraImport": true,
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "MeterUpdate",
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "isExtraImport": true,
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "SelectInloadT",
        "importPath": "src.database.models",
        "description": "src.database.models",
        "isExtraImport": true,
        "detail": "src.database.models",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database.models",
        "description": "src.database.models",
        "isExtraImport": true,
        "detail": "src.database.models",
        "documentation": {}
    },
    {
        "label": "TokenBlacklist",
        "importPath": "src.database.models",
        "description": "src.database.models",
        "isExtraImport": true,
        "detail": "src.database.models",
        "documentation": {}
    },
    {
        "label": "TokenBlacklist",
        "importPath": "src.database.models",
        "description": "src.database.models",
        "isExtraImport": true,
        "detail": "src.database.models",
        "documentation": {}
    },
    {
        "label": "Filter",
        "importPath": "src.database.models",
        "description": "src.database.models",
        "isExtraImport": true,
        "detail": "src.database.models",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database.models",
        "description": "src.database.models",
        "isExtraImport": true,
        "detail": "src.database.models",
        "documentation": {}
    },
    {
        "label": "ReadingCreate",
        "importPath": "src.apps.data.schemas",
        "description": "src.apps.data.schemas",
        "isExtraImport": true,
        "detail": "src.apps.data.schemas",
        "documentation": {}
    },
    {
        "label": "ReadingUpdate",
        "importPath": "src.apps.data.schemas",
        "description": "src.apps.data.schemas",
        "isExtraImport": true,
        "detail": "src.apps.data.schemas",
        "documentation": {}
    },
    {
        "label": "ReadingType",
        "importPath": "src.apps.data.schemas",
        "description": "src.apps.data.schemas",
        "isExtraImport": true,
        "detail": "src.apps.data.schemas",
        "documentation": {}
    },
    {
        "label": "TokenBlacklist",
        "importPath": "src.database.schemas",
        "description": "src.database.schemas",
        "isExtraImport": true,
        "detail": "src.database.schemas",
        "documentation": {}
    },
    {
        "label": "PageParams",
        "importPath": "src.database.pagination",
        "description": "src.database.pagination",
        "isExtraImport": true,
        "detail": "src.database.pagination",
        "documentation": {}
    },
    {
        "label": "PaginatedResponse",
        "importPath": "src.database.pagination",
        "description": "src.database.pagination",
        "isExtraImport": true,
        "detail": "src.database.pagination",
        "documentation": {}
    },
    {
        "label": "PageParams",
        "importPath": "src.database.pagination",
        "description": "src.database.pagination",
        "isExtraImport": true,
        "detail": "src.database.pagination",
        "documentation": {}
    },
    {
        "label": "PageParams",
        "importPath": "src.database.pagination",
        "description": "src.database.pagination",
        "isExtraImport": true,
        "detail": "src.database.pagination",
        "documentation": {}
    },
    {
        "label": "PaginatedResponse",
        "importPath": "src.database.pagination",
        "description": "src.database.pagination",
        "isExtraImport": true,
        "detail": "src.database.pagination",
        "documentation": {}
    },
    {
        "label": "paginate_query",
        "importPath": "src.database.pagination",
        "description": "src.database.pagination",
        "isExtraImport": true,
        "detail": "src.database.pagination",
        "documentation": {}
    },
    {
        "label": "AuthService",
        "importPath": "src.core.auth",
        "description": "src.core.auth",
        "isExtraImport": true,
        "detail": "src.core.auth",
        "documentation": {}
    },
    {
        "label": "TokenPair",
        "importPath": "src.core.auth",
        "description": "src.core.auth",
        "isExtraImport": true,
        "detail": "src.core.auth",
        "documentation": {}
    },
    {
        "label": "AccessToken",
        "importPath": "src.core.auth",
        "description": "src.core.auth",
        "isExtraImport": true,
        "detail": "src.core.auth",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "bcrypt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bcrypt",
        "description": "bcrypt",
        "detail": "bcrypt",
        "documentation": {}
    },
    {
        "label": "secrets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "secrets",
        "description": "secrets",
        "detail": "secrets",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "PydanticBaseSettingsSource",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "SettingsConfigDict",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "HTTPBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "HTTPAuthorizationCredentials",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.apps.users.models",
        "description": "src.apps.users.models",
        "isExtraImport": true,
        "detail": "src.apps.users.models",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "asynccontextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "asynccontextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "current_task",
        "importPath": "asyncio",
        "description": "asyncio",
        "isExtraImport": true,
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "retry",
        "importPath": "tenacity",
        "description": "tenacity",
        "isExtraImport": true,
        "detail": "tenacity",
        "documentation": {}
    },
    {
        "label": "wait_fixed",
        "importPath": "tenacity",
        "description": "tenacity",
        "isExtraImport": true,
        "detail": "tenacity",
        "documentation": {}
    },
    {
        "label": "stop_after_attempt",
        "importPath": "tenacity",
        "description": "tenacity",
        "isExtraImport": true,
        "detail": "tenacity",
        "documentation": {}
    },
    {
        "label": "retry_if_exception_type",
        "importPath": "tenacity",
        "description": "tenacity",
        "isExtraImport": true,
        "detail": "tenacity",
        "documentation": {}
    },
    {
        "label": "or_",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "NotFoundError",
        "importPath": "src.core.exceptions",
        "description": "src.core.exceptions",
        "isExtraImport": true,
        "detail": "src.core.exceptions",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "AsyncClient",
        "importPath": "httpx",
        "description": "httpx",
        "isExtraImport": true,
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "AsyncClient",
        "importPath": "httpx",
        "description": "httpx",
        "isExtraImport": true,
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "ASGITransport",
        "importPath": "httpx",
        "description": "httpx",
        "isExtraImport": true,
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "UserType",
        "importPath": "src.apps.users.schemas",
        "description": "src.apps.users.schemas",
        "isExtraImport": true,
        "detail": "src.apps.users.schemas",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "TestClient",
        "importPath": "fastapi.testclient",
        "description": "fastapi.testclient",
        "isExtraImport": true,
        "detail": "fastapi.testclient",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "src.apps.alerts.router",
        "description": "src.apps.alerts.router",
        "isExtraImport": true,
        "detail": "src.apps.alerts.router",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "src.apps.areas_trans_meters.router",
        "description": "src.apps.areas_trans_meters.router",
        "isExtraImport": true,
        "detail": "src.apps.areas_trans_meters.router",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "src.apps.data.router",
        "description": "src.apps.data.router",
        "isExtraImport": true,
        "detail": "src.apps.data.router",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "src.apps.users.router",
        "description": "src.apps.users.router",
        "isExtraImport": true,
        "detail": "src.apps.users.router",
        "documentation": {}
    },
    {
        "label": "Alert",
        "kind": 6,
        "importPath": "src.apps.alerts.models",
        "description": "src.apps.alerts.models",
        "peekOfCode": "class Alert(Base[AlertCreate, AlertUpdate]):\n    __tablename__ = f\"{settings.API_NAME.lower()}__alerts\"\n    title: Mapped[str] = mapped_column(String(100), nullable=False, unique=True)\n    message: Mapped[str] = mapped_column(Text, nullable=False)\n    status: Mapped[AlertStatus] = mapped_column(String(10), nullable=False)\n    def __repr__(self):\n        return f\"<Alert {self.title}>\"",
        "detail": "src.apps.alerts.models",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.apps.alerts.router",
        "description": "src.apps.alerts.router",
        "peekOfCode": "router = APIRouter(prefix=\"/alerts\", tags=[\"Alerts\"])\n@router.get(\"/{alert_id}\", response_model=Alert)\nasync def get_alert(\n    alert_id: PyUUID,\n    db: AsyncSession = Depends(aget_db),\n    current_user: CurrentUser = Depends(get_current_user),\n):\n    alert = await AlertDB.get_by_id(db, alert_id)\n    if not alert:\n        raise HTTPException(status_code=404, detail=\"Alert not found\")",
        "detail": "src.apps.alerts.router",
        "documentation": {}
    },
    {
        "label": "AlertStatus",
        "kind": 6,
        "importPath": "src.apps.alerts.schemas",
        "description": "src.apps.alerts.schemas",
        "peekOfCode": "class AlertStatus(Enum):\n    INFO = \"info\"\n    WARNING = \"warning\"\n    ERROR = \"error\"\n    CRITICAL = \"critical\"\n    EXPIRED = \"expired\"\nclass AlertBase(BaseModel):\n    title: str\n    message: str\n    status: AlertStatus",
        "detail": "src.apps.alerts.schemas",
        "documentation": {}
    },
    {
        "label": "AlertBase",
        "kind": 6,
        "importPath": "src.apps.alerts.schemas",
        "description": "src.apps.alerts.schemas",
        "peekOfCode": "class AlertBase(BaseModel):\n    title: str\n    message: str\n    status: AlertStatus\nclass AlertCreate(AlertBase): ...\nclass AlertUpdate(BaseModel):\n    title: str | None = None\n    message: str | None = None\n    status: AlertStatus | None = None\nclass Alert(AlertBase):",
        "detail": "src.apps.alerts.schemas",
        "documentation": {}
    },
    {
        "label": "AlertCreate",
        "kind": 6,
        "importPath": "src.apps.alerts.schemas",
        "description": "src.apps.alerts.schemas",
        "peekOfCode": "class AlertCreate(AlertBase): ...\nclass AlertUpdate(BaseModel):\n    title: str | None = None\n    message: str | None = None\n    status: AlertStatus | None = None\nclass Alert(AlertBase):\n    id: PyUUID\n    created_at: datetime\n    updated_at: datetime",
        "detail": "src.apps.alerts.schemas",
        "documentation": {}
    },
    {
        "label": "AlertUpdate",
        "kind": 6,
        "importPath": "src.apps.alerts.schemas",
        "description": "src.apps.alerts.schemas",
        "peekOfCode": "class AlertUpdate(BaseModel):\n    title: str | None = None\n    message: str | None = None\n    status: AlertStatus | None = None\nclass Alert(AlertBase):\n    id: PyUUID\n    created_at: datetime\n    updated_at: datetime",
        "detail": "src.apps.alerts.schemas",
        "documentation": {}
    },
    {
        "label": "Alert",
        "kind": 6,
        "importPath": "src.apps.alerts.schemas",
        "description": "src.apps.alerts.schemas",
        "peekOfCode": "class Alert(AlertBase):\n    id: PyUUID\n    created_at: datetime\n    updated_at: datetime",
        "detail": "src.apps.alerts.schemas",
        "documentation": {}
    },
    {
        "label": "Meter",
        "kind": 6,
        "importPath": "src.apps.areas_trans_meters.models",
        "description": "src.apps.areas_trans_meters.models",
        "peekOfCode": "class Meter(Base[MeterCreate, MeterUpdate]):\n    __tablename__ = f\"{settings.API_NAME.lower()}__meters\"\n    name: Mapped[str] = mapped_column(String(100), nullable=False, unique=True)\n    description: Mapped[str] = mapped_column(Text, nullable=False)\n    transformer_id: Mapped[PyUUID] = mapped_column(\n        ForeignKey(f\"{settings.API_NAME.lower()}__transformers.id\"), nullable=False\n    )\n    transformer: Mapped[\"Transformer\"] = relationship(\n        \"Transformer\", back_populates=\"meters\", remote_side=\"Transformer.id\"\n    )",
        "detail": "src.apps.areas_trans_meters.models",
        "documentation": {}
    },
    {
        "label": "Transformer",
        "kind": 6,
        "importPath": "src.apps.areas_trans_meters.models",
        "description": "src.apps.areas_trans_meters.models",
        "peekOfCode": "class Transformer(Base[TransformerCreate, TransformerUpdate]):\n    __tablename__ = f\"{settings.API_NAME.lower()}__transformers\"\n    name: Mapped[str] = mapped_column(String(100), nullable=False, unique=True)\n    description: Mapped[str] = mapped_column(Text, nullable=False)\n    coverage_area_id: Mapped[PyUUID] = mapped_column(\n        ForeignKey(f\"{settings.API_NAME.lower()}__coverage_areas.id\"), nullable=False\n    )\n    coverage_area: Mapped[\"CoverageArea\"] = relationship(\n        \"CoverageArea\", back_populates=\"transformers\", remote_side=\"CoverageArea.id\"\n    )",
        "detail": "src.apps.areas_trans_meters.models",
        "documentation": {}
    },
    {
        "label": "CoverageArea",
        "kind": 6,
        "importPath": "src.apps.areas_trans_meters.models",
        "description": "src.apps.areas_trans_meters.models",
        "peekOfCode": "class CoverageArea(Base[CoverageAreaCreate, CoverageAreaUpdate]):\n    __tablename__ = f\"{settings.API_NAME.lower()}__coverage_areas\"\n    __table_args__ = (\n        UniqueConstraint(\"type\", \"name\", name=\"uq_coverage_area_type_name\"),\n    )\n    type: Mapped[CoverageAreaType] = mapped_column(String(15), nullable=False)\n    name: Mapped[str] = mapped_column(String(100), nullable=False)\n    description: Mapped[str] = mapped_column(Text, nullable=False)\n    parent_id: Mapped[Optional[PyUUID]] = mapped_column(\n        ForeignKey(f\"{settings.API_NAME.lower()}__coverage_areas.id\"), nullable=True",
        "detail": "src.apps.areas_trans_meters.models",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.apps.areas_trans_meters.router",
        "description": "src.apps.areas_trans_meters.router",
        "peekOfCode": "router = APIRouter()\n@router.get(\"/coverage-area/{id}\", response_model=CoverageArea, tags=[\"Coverage Areas\"])\nasync def get_coverage_area(\n    id: PyUUID = Path(..., description=\"The ID of the coverage area\"),\n    db: AsyncSession = Depends(aget_db),\n    current_user: CurrentUser = Depends(get_current_user),\n):\n    coverage_area = await CoverageAreaDB.get_by_id(\n        db, id, selectinloads=[(\"transformers\", \"meters\")]\n    )",
        "detail": "src.apps.areas_trans_meters.router",
        "documentation": {}
    },
    {
        "label": "TransformerBase",
        "kind": 6,
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "peekOfCode": "class TransformerBase(BaseModel):\n    name: str\n    description: str\nclass TransformerCreate(TransformerBase):\n    coverage_area_id: PyUUID\nclass TransformerUpdate(BaseModel):\n    name: Optional[str] = None\n    description: Optional[str] = None\n    coverage_area_id: Optional[PyUUID] = None\nclass Transformer(TransformerBase):",
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "TransformerCreate",
        "kind": 6,
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "peekOfCode": "class TransformerCreate(TransformerBase):\n    coverage_area_id: PyUUID\nclass TransformerUpdate(BaseModel):\n    name: Optional[str] = None\n    description: Optional[str] = None\n    coverage_area_id: Optional[PyUUID] = None\nclass Transformer(TransformerBase):\n    id: PyUUID\n    num_meters: int\n    created_at: datetime",
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "TransformerUpdate",
        "kind": 6,
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "peekOfCode": "class TransformerUpdate(BaseModel):\n    name: Optional[str] = None\n    description: Optional[str] = None\n    coverage_area_id: Optional[PyUUID] = None\nclass Transformer(TransformerBase):\n    id: PyUUID\n    num_meters: int\n    created_at: datetime\n    updated_at: datetime\n    model_config = ConfigDict(from_attributes=True)",
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "Transformer",
        "kind": 6,
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "peekOfCode": "class Transformer(TransformerBase):\n    id: PyUUID\n    num_meters: int\n    created_at: datetime\n    updated_at: datetime\n    model_config = ConfigDict(from_attributes=True)\nclass MeterBase(BaseModel):\n    name: str\n    description: str\nclass MeterCreate(MeterBase):",
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "MeterBase",
        "kind": 6,
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "peekOfCode": "class MeterBase(BaseModel):\n    name: str\n    description: str\nclass MeterCreate(MeterBase):\n    transformer_id: PyUUID\nclass Meter(MeterBase):\n    id: PyUUID\n    created_at: datetime\n    updated_at: datetime\n    model_config = ConfigDict(from_attributes=True)",
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "MeterCreate",
        "kind": 6,
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "peekOfCode": "class MeterCreate(MeterBase):\n    transformer_id: PyUUID\nclass Meter(MeterBase):\n    id: PyUUID\n    created_at: datetime\n    updated_at: datetime\n    model_config = ConfigDict(from_attributes=True)\nclass MeterUpdate(BaseModel):\n    name: Optional[str] = None\n    description: Optional[str] = None",
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "Meter",
        "kind": 6,
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "peekOfCode": "class Meter(MeterBase):\n    id: PyUUID\n    created_at: datetime\n    updated_at: datetime\n    model_config = ConfigDict(from_attributes=True)\nclass MeterUpdate(BaseModel):\n    name: Optional[str] = None\n    description: Optional[str] = None\n    coverage_area_id: Optional[PyUUID] = None\nclass CoverageAreaType(Enum):",
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "MeterUpdate",
        "kind": 6,
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "peekOfCode": "class MeterUpdate(BaseModel):\n    name: Optional[str] = None\n    description: Optional[str] = None\n    coverage_area_id: Optional[PyUUID] = None\nclass CoverageAreaType(Enum):\n    COUNTRY = \"country\"\n    PROVINCE = \"province\"\n    DISTRICT = \"district\"\n    SUB_DISTRICT = \"sub-district\"\n    VILLAGE = \"village\"",
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "CoverageAreaType",
        "kind": 6,
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "peekOfCode": "class CoverageAreaType(Enum):\n    COUNTRY = \"country\"\n    PROVINCE = \"province\"\n    DISTRICT = \"district\"\n    SUB_DISTRICT = \"sub-district\"\n    VILLAGE = \"village\"\nclass CoverageAreaBase(BaseModel):\n    type: CoverageAreaType\n    name: str\n    description: str",
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "CoverageAreaBase",
        "kind": 6,
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "peekOfCode": "class CoverageAreaBase(BaseModel):\n    type: CoverageAreaType\n    name: str\n    description: str\nclass CoverageAreaCreate(CoverageAreaBase):\n    parent_id: Optional[PyUUID] = None\nclass CoverageAreaUpdate(BaseModel):\n    type: Optional[CoverageAreaType] = None\n    name: Optional[str] = None\n    description: Optional[str] = None",
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "CoverageAreaCreate",
        "kind": 6,
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "peekOfCode": "class CoverageAreaCreate(CoverageAreaBase):\n    parent_id: Optional[PyUUID] = None\nclass CoverageAreaUpdate(BaseModel):\n    type: Optional[CoverageAreaType] = None\n    name: Optional[str] = None\n    description: Optional[str] = None\n    parent_id: Optional[PyUUID] = None\nclass CoverageAreaOut(CoverageAreaBase):\n    num_transformers: int\n    num_meters: int",
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "CoverageAreaUpdate",
        "kind": 6,
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "peekOfCode": "class CoverageAreaUpdate(BaseModel):\n    type: Optional[CoverageAreaType] = None\n    name: Optional[str] = None\n    description: Optional[str] = None\n    parent_id: Optional[PyUUID] = None\nclass CoverageAreaOut(CoverageAreaBase):\n    num_transformers: int\n    num_meters: int\nclass CoverageArea(CoverageAreaOut):\n    id: PyUUID",
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "CoverageAreaOut",
        "kind": 6,
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "peekOfCode": "class CoverageAreaOut(CoverageAreaBase):\n    num_transformers: int\n    num_meters: int\nclass CoverageArea(CoverageAreaOut):\n    id: PyUUID\n    parent_id: Optional[PyUUID] = None\n    created_at: datetime\n    updated_at: datetime\n    model_config = ConfigDict(from_attributes=True)\nclass CoverageAreaWithSubAreas(CoverageAreaOut):",
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "CoverageArea",
        "kind": 6,
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "peekOfCode": "class CoverageArea(CoverageAreaOut):\n    id: PyUUID\n    parent_id: Optional[PyUUID] = None\n    created_at: datetime\n    updated_at: datetime\n    model_config = ConfigDict(from_attributes=True)\nclass CoverageAreaWithSubAreas(CoverageAreaOut):\n    \"\"\"Coverage area with nested sub-areas\"\"\"\n    id: PyUUID\n    parent_id: Optional[PyUUID] = None",
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "CoverageAreaWithSubAreas",
        "kind": 6,
        "importPath": "src.apps.areas_trans_meters.schemas",
        "description": "src.apps.areas_trans_meters.schemas",
        "peekOfCode": "class CoverageAreaWithSubAreas(CoverageAreaOut):\n    \"\"\"Coverage area with nested sub-areas\"\"\"\n    id: PyUUID\n    parent_id: Optional[PyUUID] = None\n    sub_areas: List[CoverageArea] = []\n    created_at: datetime\n    updated_at: datetime\n    model_config = ConfigDict(from_attributes=True)",
        "detail": "src.apps.areas_trans_meters.schemas",
        "documentation": {}
    },
    {
        "label": "Reading",
        "kind": 6,
        "importPath": "src.apps.data.models",
        "description": "src.apps.data.models",
        "peekOfCode": "class Reading(Base[ReadingCreate, ReadingUpdate]):\n    \"\"\"\n    Unified readings table for all measurement types.\n    Partitioned by timestamp for optimal time-series performance.\n    \"\"\"\n    __tablename__ = f\"{settings.API_NAME.lower()}__readings\"\n    id: Mapped[PyUUID] = mapped_column(PGUUID, default=uuid4)\n    meter_id: Mapped[Optional[PyUUID]] = mapped_column(\n        ForeignKey(f\"{settings.API_NAME.lower()}__meters.id\"), nullable=True, index=True\n    )",
        "detail": "src.apps.data.models",
        "documentation": {}
    },
    {
        "label": "get_unit_for_type",
        "kind": 2,
        "importPath": "src.apps.data.router",
        "description": "src.apps.data.router",
        "peekOfCode": "def get_unit_for_type(reading_type: ReadingType) -> Optional[str]:\n    \"\"\"Get the standard unit for each reading type\"\"\"\n    unit_map = {\n        ReadingType.CURRENT: \"A\",\n        ReadingType.VOLTAGE: \"V\",\n        ReadingType.POWER: \"W\",\n        ReadingType.POWER_FACTOR: None,\n        ReadingType.TEMPERATURE: \"°C\",\n        ReadingType.ENERGY_CONSUMPTION: \"kWh\",\n    }",
        "detail": "src.apps.data.router",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.apps.data.router",
        "description": "src.apps.data.router",
        "peekOfCode": "router = APIRouter(prefix=\"/readings\", tags=[\"Readings\"])\ndef get_unit_for_type(reading_type: ReadingType) -> Optional[str]:\n    \"\"\"Get the standard unit for each reading type\"\"\"\n    unit_map = {\n        ReadingType.CURRENT: \"A\",\n        ReadingType.VOLTAGE: \"V\",\n        ReadingType.POWER: \"W\",\n        ReadingType.POWER_FACTOR: None,\n        ReadingType.TEMPERATURE: \"°C\",\n        ReadingType.ENERGY_CONSUMPTION: \"kWh\",",
        "detail": "src.apps.data.router",
        "documentation": {}
    },
    {
        "label": "ReadingType",
        "kind": 6,
        "importPath": "src.apps.data.schemas",
        "description": "src.apps.data.schemas",
        "peekOfCode": "class ReadingType(str, Enum):\n    CURRENT = \"current\"\n    VOLTAGE = \"voltage\"\n    POWER = \"power\"\n    POWER_FACTOR = \"power_factor\"\n    TEMPERATURE = \"temperature\"\n    ENERGY_CONSUMPTION = \"energy_consumption\"\nclass BaseReading(BaseModel):\n    meter_id: PyUUID | None = None\n    transformer_id: PyUUID | None = None",
        "detail": "src.apps.data.schemas",
        "documentation": {}
    },
    {
        "label": "BaseReading",
        "kind": 6,
        "importPath": "src.apps.data.schemas",
        "description": "src.apps.data.schemas",
        "peekOfCode": "class BaseReading(BaseModel):\n    meter_id: PyUUID | None = None\n    transformer_id: PyUUID | None = None\n    value: float\n    timestamp: datetime\n    reading_type: ReadingType\n    is_estimated: bool = False\n    confidence_score: float | None = None\n    source_info: str | None = None\n    @model_validator(mode=\"after\")",
        "detail": "src.apps.data.schemas",
        "documentation": {}
    },
    {
        "label": "ReadingUpdate",
        "kind": 6,
        "importPath": "src.apps.data.schemas",
        "description": "src.apps.data.schemas",
        "peekOfCode": "class ReadingUpdate(BaseReading):\n    id: PyUUID\n    value: float | None = None  # type: ignore\nclass ReadingCreate(BaseReading): ...\nclass Reading(BaseReading):\n    id: PyUUID\n    created_at: datetime\n    updated_at: datetime",
        "detail": "src.apps.data.schemas",
        "documentation": {}
    },
    {
        "label": "ReadingCreate",
        "kind": 6,
        "importPath": "src.apps.data.schemas",
        "description": "src.apps.data.schemas",
        "peekOfCode": "class ReadingCreate(BaseReading): ...\nclass Reading(BaseReading):\n    id: PyUUID\n    created_at: datetime\n    updated_at: datetime",
        "detail": "src.apps.data.schemas",
        "documentation": {}
    },
    {
        "label": "Reading",
        "kind": 6,
        "importPath": "src.apps.data.schemas",
        "description": "src.apps.data.schemas",
        "peekOfCode": "class Reading(BaseReading):\n    id: PyUUID\n    created_at: datetime\n    updated_at: datetime",
        "detail": "src.apps.data.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "src.apps.users.models",
        "description": "src.apps.users.models",
        "peekOfCode": "class User(Base[UserCreate, UserUpdate]):\n    __tablename__ = f\"{settings.API_NAME.lower()}__users\"\n    hashed_key: Mapped[str] = mapped_column(String, unique=True, index=True, nullable=False)\n    email: Mapped[str] = mapped_column(String, unique=True, index=True, nullable=False)\n    first_name: Mapped[str] = mapped_column(String, nullable=False)\n    last_name: Mapped[str] = mapped_column(String, nullable=False)\n    other_names: Mapped[str] = mapped_column(String, nullable=True)\n    phone: Mapped[str] = mapped_column(String, nullable=True)\n    type: Mapped[UserType] = mapped_column(String, nullable=True)",
        "detail": "src.apps.users.models",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.apps.users.router",
        "description": "src.apps.users.router",
        "peekOfCode": "router = APIRouter(prefix=\"/auth\", tags=[\"Authentication\"])\n@router.get(\"/me\", response_model=User)\nasync def current_user(current_user: CurrentUser = Depends(get_current_user)):\n    return current_user.db_user\n@router.get(\"/users\", response_model=PaginatedResponse[User])\nasync def get_users(\n    request: Request,\n    page_params: PageParams = Depends(get_page_params),\n    db: AsyncSession = Depends(aget_db),\n    current_user: CurrentUser = Depends(get_current_user),",
        "detail": "src.apps.users.router",
        "documentation": {}
    },
    {
        "label": "UserType",
        "kind": 6,
        "importPath": "src.apps.users.schemas",
        "description": "src.apps.users.schemas",
        "peekOfCode": "class UserType(str, Enum):\n    ADMIN = \"admin\"\n    USER = \"user\"\nclass UserBase(BaseModel):\n    email: EmailStr\n    first_name: str\n    last_name: str\n    other_names: Optional[str] = None\n    phone: Optional[str] = None\n    type: Optional[UserType] = UserType.USER",
        "detail": "src.apps.users.schemas",
        "documentation": {}
    },
    {
        "label": "UserBase",
        "kind": 6,
        "importPath": "src.apps.users.schemas",
        "description": "src.apps.users.schemas",
        "peekOfCode": "class UserBase(BaseModel):\n    email: EmailStr\n    first_name: str\n    last_name: str\n    other_names: Optional[str] = None\n    phone: Optional[str] = None\n    type: Optional[UserType] = UserType.USER\nclass UserCreate(UserBase):\n    key: str\n    key_confirm: str",
        "detail": "src.apps.users.schemas",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "kind": 6,
        "importPath": "src.apps.users.schemas",
        "description": "src.apps.users.schemas",
        "peekOfCode": "class UserCreate(UserBase):\n    key: str\n    key_confirm: str\n    @model_validator(mode=\"after\")\n    def check_keys_match(self):\n        if self.key != self.key_confirm:\n            raise ValueError(\"Keys do not match\")\n        return self\nclass UserUpdate(BaseModel):\n    email: Optional[str] = None",
        "detail": "src.apps.users.schemas",
        "documentation": {}
    },
    {
        "label": "UserUpdate",
        "kind": 6,
        "importPath": "src.apps.users.schemas",
        "description": "src.apps.users.schemas",
        "peekOfCode": "class UserUpdate(BaseModel):\n    email: Optional[str] = None\n    first_name: Optional[str] = None\n    last_name: Optional[str] = None\n    type: Optional[UserType] = None\n    other_names: Optional[str] = None\n    phone: Optional[str] = None\nclass User(UserBase):\n    id: PyUUID\n    created_at: datetime",
        "detail": "src.apps.users.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "src.apps.users.schemas",
        "description": "src.apps.users.schemas",
        "peekOfCode": "class User(UserBase):\n    id: PyUUID\n    created_at: datetime\n    updated_at: datetime\nclass LoginRequest(BaseModel):\n    email: EmailStr\n    key: str\nclass AccessTokenRefreshRequest(BaseModel):\n    refresh_token: str",
        "detail": "src.apps.users.schemas",
        "documentation": {}
    },
    {
        "label": "LoginRequest",
        "kind": 6,
        "importPath": "src.apps.users.schemas",
        "description": "src.apps.users.schemas",
        "peekOfCode": "class LoginRequest(BaseModel):\n    email: EmailStr\n    key: str\nclass AccessTokenRefreshRequest(BaseModel):\n    refresh_token: str",
        "detail": "src.apps.users.schemas",
        "documentation": {}
    },
    {
        "label": "AccessTokenRefreshRequest",
        "kind": 6,
        "importPath": "src.apps.users.schemas",
        "description": "src.apps.users.schemas",
        "peekOfCode": "class AccessTokenRefreshRequest(BaseModel):\n    refresh_token: str",
        "detail": "src.apps.users.schemas",
        "documentation": {}
    },
    {
        "label": "TokenType",
        "kind": 6,
        "importPath": "src.core.auth",
        "description": "src.core.auth",
        "peekOfCode": "class TokenType(str, Enum):\n    ACCESS = \"access\"\n    REFRESH = \"refresh\"\nclass TokenPair(BaseModel):\n    access_token: str\n    refresh_token: str\n    token_type: Literal[\"bearer\"] = \"bearer\"\n    access_expires_in: int = Field(..., description=\"Access token expires in seconds\")\n    refresh_expires_in: int = Field(..., description=\"Refresh token expires in seconds\")\nclass AccessToken(BaseModel):",
        "detail": "src.core.auth",
        "documentation": {}
    },
    {
        "label": "TokenPair",
        "kind": 6,
        "importPath": "src.core.auth",
        "description": "src.core.auth",
        "peekOfCode": "class TokenPair(BaseModel):\n    access_token: str\n    refresh_token: str\n    token_type: Literal[\"bearer\"] = \"bearer\"\n    access_expires_in: int = Field(..., description=\"Access token expires in seconds\")\n    refresh_expires_in: int = Field(..., description=\"Refresh token expires in seconds\")\nclass AccessToken(BaseModel):\n    access_token: str\n    token_type: Literal[\"bearer\"] = \"bearer\"\n    expires_in: int = Field(..., description=\"Access token expires in seconds\")",
        "detail": "src.core.auth",
        "documentation": {}
    },
    {
        "label": "AccessToken",
        "kind": 6,
        "importPath": "src.core.auth",
        "description": "src.core.auth",
        "peekOfCode": "class AccessToken(BaseModel):\n    access_token: str\n    token_type: Literal[\"bearer\"] = \"bearer\"\n    expires_in: int = Field(..., description=\"Access token expires in seconds\")\nclass RefreshToken(BaseModel):\n    refresh_token: str\n    token_type: Literal[\"bearer\"] = \"bearer\"\n    expires_in: int = Field(..., description=\"Refresh token expires in seconds\")\nclass AuthService:\n    \"\"\"",
        "detail": "src.core.auth",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "kind": 6,
        "importPath": "src.core.auth",
        "description": "src.core.auth",
        "peekOfCode": "class RefreshToken(BaseModel):\n    refresh_token: str\n    token_type: Literal[\"bearer\"] = \"bearer\"\n    expires_in: int = Field(..., description=\"Refresh token expires in seconds\")\nclass AuthService:\n    \"\"\"\n    Authentication service.\n    \"\"\"\n    @staticmethod\n    def verify_password(plain_password: str, hashed_password: str) -> bool:",
        "detail": "src.core.auth",
        "documentation": {}
    },
    {
        "label": "AuthService",
        "kind": 6,
        "importPath": "src.core.auth",
        "description": "src.core.auth",
        "peekOfCode": "class AuthService:\n    \"\"\"\n    Authentication service.\n    \"\"\"\n    @staticmethod\n    def verify_password(plain_password: str, hashed_password: str) -> bool:\n        \"\"\"\n        Verify a password.\n        Args:\n            plain_password: The plain password.",
        "detail": "src.core.auth",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "src.core.config",
        "description": "src.core.config",
        "peekOfCode": "class Settings(BaseSettings):\n    SECRET_KEY: str\n    ENVIRONMENT: Literal[\"development\", \"production\"] = \"production\"\n    API_VERSION: str\n    API_NAME: str = \"enerlytics\"\n    APOSTGRES_DATABASE_URL: str\n    GEMINI_API_KEY: str\n    LYTI_LLM: str\n    ACCESS_TOKEN_EXPIRE_HOURS: int = 24\n    REFRESH_TOKEN_EXPIRE_HOURS: int = 24 * 7",
        "detail": "src.core.config",
        "documentation": {}
    },
    {
        "label": "hash_key",
        "kind": 2,
        "importPath": "src.core.config",
        "description": "src.core.config",
        "peekOfCode": "def hash_key(key: str) -> str:\n    return hashlib.sha256(key.encode()).hexdigest()\nclass Settings(BaseSettings):\n    SECRET_KEY: str\n    ENVIRONMENT: Literal[\"development\", \"production\"] = \"production\"\n    API_VERSION: str\n    API_NAME: str = \"enerlytics\"\n    APOSTGRES_DATABASE_URL: str\n    GEMINI_API_KEY: str\n    LYTI_LLM: str",
        "detail": "src.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "src.core.config",
        "description": "src.core.config",
        "peekOfCode": "settings = Settings()  # type: ignore",
        "detail": "src.core.config",
        "documentation": {}
    },
    {
        "label": "CurrentUser",
        "kind": 6,
        "importPath": "src.core.dependencies",
        "description": "src.core.dependencies",
        "peekOfCode": "class CurrentUser(BaseModel):\n    db_user: UserDB\n    payload: Dict[str, Any]\n    model_config = ConfigDict(from_attributes=True, arbitrary_types_allowed=True)\nasync def _get_current_user_any_token(\n    token_type: Literal[\"access\", \"refresh\"],\n    credentials: HTTPAuthorizationCredentials,\n    db: AsyncSession,\n) -> CurrentUser:\n    \"\"\"",
        "detail": "src.core.dependencies",
        "documentation": {}
    },
    {
        "label": "get_page_params",
        "kind": 2,
        "importPath": "src.core.dependencies",
        "description": "src.core.dependencies",
        "peekOfCode": "def get_page_params(\n    page: int = 1,\n    size: int = 100,\n    sort_by: Literal[\"created_at\", \"updated_at\"] | str = \"created_at\",\n    sort_order: Literal[\"asc\", \"desc\"] = \"desc\",\n) -> PageParams:\n    \"\"\"\n    FastAPI dependency for pagination parameters.\n    Args:\n        page (int): The page number.",
        "detail": "src.core.dependencies",
        "documentation": {}
    },
    {
        "label": "get_readings_page_params",
        "kind": 2,
        "importPath": "src.core.dependencies",
        "description": "src.core.dependencies",
        "peekOfCode": "def get_readings_page_params(\n    page: int = 1,\n    size: int = 100,\n    sort_by: Literal[\"created_at\", \"updated_at\"] | str = \"created_at\",\n    sort_order: Literal[\"asc\", \"desc\"] = \"desc\",\n) -> PageParams:\n    \"\"\"\n    FastAPI dependency for pagination parameters.\n    Args:\n        page (int): The page number.",
        "detail": "src.core.dependencies",
        "documentation": {}
    },
    {
        "label": "security",
        "kind": 5,
        "importPath": "src.core.dependencies",
        "description": "src.core.dependencies",
        "peekOfCode": "security = HTTPBearer(\n    scheme_name=\"Bearer\",\n    description=\"JWT Authorization header using the Bearer scheme\",\n)\nclass CurrentUser(BaseModel):\n    db_user: UserDB\n    payload: Dict[str, Any]\n    model_config = ConfigDict(from_attributes=True, arbitrary_types_allowed=True)\nasync def _get_current_user_any_token(\n    token_type: Literal[\"access\", \"refresh\"],",
        "detail": "src.core.dependencies",
        "documentation": {}
    },
    {
        "label": "NotFoundError",
        "kind": 6,
        "importPath": "src.core.exceptions",
        "description": "src.core.exceptions",
        "peekOfCode": "class NotFoundError(Exception):\n    def __init__(self, message: str):\n        self.message = message\n        super().__init__(self.message)\n    def __repr__(self) -> str:\n        return f\"({self.__class__.__name__}message={self.message})\"\n    def __str__(self) -> str:\n        return self.__repr__()",
        "detail": "src.core.exceptions",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "kind": 2,
        "importPath": "src.core.logging",
        "description": "src.core.logging",
        "peekOfCode": "def get_logger(name: str = __name__, level: str = \"INFO\") -> logging.Logger:\n    \"\"\"\n    Get a configured logger instance for the application.\n    Args:\n        name: Logger name, defaults to the calling module's name\n        level: Logging level (DEBUG, INFO, WARNING, ERROR, CRITICAL)\n    Returns:\n        Configured logger instance\n    \"\"\"\n    logger = logging.getLogger(name)",
        "detail": "src.core.logging",
        "documentation": {}
    },
    {
        "label": "QueryParser",
        "kind": 6,
        "importPath": "src.core.query_parser",
        "description": "src.core.query_parser",
        "peekOfCode": "class QueryParser:\n    \"\"\"\n    Parse complex query parameters into Filter objects.\n    Supports various formats:\n    - Simple: ?field=value\n    - With operator: ?field__operator=value\n    - Multiple values: ?field__in=value1,value2,value3\n    - Complex: ?field__between=10,20\n    \"\"\"\n    SUPPORTED_OPERATORS: List[OperatorType] = list(OperatorType.__args__)",
        "detail": "src.core.query_parser",
        "documentation": {}
    },
    {
        "label": "parse_filters",
        "kind": 2,
        "importPath": "src.core.query_parser",
        "description": "src.core.query_parser",
        "peekOfCode": "def parse_filters(\n    query_params: Dict[str, Any], allowed_fields: List[str]\n) -> List[Filter]:\n    \"\"\"Parse query parameters specifically for user filtering.\"\"\"\n    return QueryParser.parse_query_params(query_params, allowed_fields)\ndef build_search_filters(search_term: str, fields: List[str]) -> List[Filter]:\n    \"\"\"Build filters for searching across multiple fields.\"\"\"\n    if not search_term or not fields:\n        return []\n    return [",
        "detail": "src.core.query_parser",
        "documentation": {}
    },
    {
        "label": "build_search_filters",
        "kind": 2,
        "importPath": "src.core.query_parser",
        "description": "src.core.query_parser",
        "peekOfCode": "def build_search_filters(search_term: str, fields: List[str]) -> List[Filter]:\n    \"\"\"Build filters for searching across multiple fields.\"\"\"\n    if not search_term or not fields:\n        return []\n    return [\n        Filter(field=field, operator=\"ilike\", value=f\"%{search_term}%\")\n        for field in fields\n    ]",
        "detail": "src.core.query_parser",
        "documentation": {}
    },
    {
        "label": "OperatorType",
        "kind": 5,
        "importPath": "src.core.query_parser",
        "description": "src.core.query_parser",
        "peekOfCode": "OperatorType = Literal[\n    \"==\",\n    \"!=\",\n    \">\",\n    \">=\",\n    \"<\",\n    \"<=\",\n    \"in\",\n    \"not in\",\n    \"is\",",
        "detail": "src.core.query_parser",
        "documentation": {}
    },
    {
        "label": "DatabaseSessionManager",
        "kind": 6,
        "importPath": "src.database.asession",
        "description": "src.database.asession",
        "peekOfCode": "class DatabaseSessionManager:\n    def __init__(self, database_url: str):\n        self.engine = create_async_engine(\n            database_url,\n            pool_size=20,\n            max_overflow=10,\n            pool_timeout=30,\n            pool_recycle=60 * 30,\n            pool_pre_ping=True,\n            connect_args={",
        "detail": "src.database.asession",
        "documentation": {}
    },
    {
        "label": "asession_manager",
        "kind": 5,
        "importPath": "src.database.asession",
        "description": "src.database.asession",
        "peekOfCode": "asession_manager = DatabaseSessionManager(database_url=settings.APOSTGRES_DATABASE_URL)\nasync def aget_db() -> AsyncGenerator[AsyncSession, None]:\n    async with asession_manager.get_session() as session:\n        yield session",
        "detail": "src.database.asession",
        "documentation": {}
    },
    {
        "label": "Filter",
        "kind": 6,
        "importPath": "src.database.models",
        "description": "src.database.models",
        "peekOfCode": "class Filter(BaseModel):\n    field: str\n    operator: Literal[\n        \"==\",\n        \"!=\",\n        \">\",\n        \">=\",\n        \"<\",\n        \"<=\",\n        \"in\",",
        "detail": "src.database.models",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "src.database.models",
        "description": "src.database.models",
        "peekOfCode": "class Base(DeclarativeBase, Generic[CreateSchemaType, UpdateSchemaType]):\n    metadata = MetaData(naming_convention=naming_convention)\n    id: Mapped[PyUUID] = mapped_column(PGUUID, primary_key=True, default=uuid4)\n    created_at: Mapped[datetime] = mapped_column(\n        DateTime, default=datetime.now, nullable=False\n    )\n    updated_at: Mapped[datetime] = mapped_column(\n        DateTime,\n        default=datetime.now,\n        onupdate=datetime.now,",
        "detail": "src.database.models",
        "documentation": {}
    },
    {
        "label": "TokenBlacklist",
        "kind": 6,
        "importPath": "src.database.models",
        "description": "src.database.models",
        "peekOfCode": "class TokenBlacklist(Base[TokenBlacklistSchema, TokenBlacklistSchema]):\n    __tablename__ = f\"{settings.API_NAME.lower()}__token_blacklist\"\n    jti: Mapped[str] = mapped_column(String, unique=True, index=True, nullable=False)\n    token_type: Mapped[Literal[\"access\", \"refresh\"]] = mapped_column(\n        String, nullable=False\n    )\n    user_id: Mapped[PyUUID] = mapped_column(PGUUID, nullable=False)\n    expires_at: Mapped[datetime] = mapped_column(DateTime, nullable=False)",
        "detail": "src.database.models",
        "documentation": {}
    },
    {
        "label": "naming_convention",
        "kind": 5,
        "importPath": "src.database.models",
        "description": "src.database.models",
        "peekOfCode": "naming_convention = {\n    \"ix\": \"ix_%(column_0_label)s\",\n    \"uq\": \"uq_%(table_name)s_%(column_0_name)s\",\n    \"ck\": \"ck_%(table_name)s_%(constraint_name)s\",\n    \"fk\": \"fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s\",\n    \"pk\": \"pk_%(table_name)s\",\n}\nCreateSchemaType = TypeVar(\"CreateSchemaType\", bound=BaseModel)\nUpdateSchemaType = TypeVar(\"UpdateSchemaType\", bound=BaseModel)\nSelectInloadT = str | Tuple[str, ...]",
        "detail": "src.database.models",
        "documentation": {}
    },
    {
        "label": "CreateSchemaType",
        "kind": 5,
        "importPath": "src.database.models",
        "description": "src.database.models",
        "peekOfCode": "CreateSchemaType = TypeVar(\"CreateSchemaType\", bound=BaseModel)\nUpdateSchemaType = TypeVar(\"UpdateSchemaType\", bound=BaseModel)\nSelectInloadT = str | Tuple[str, ...]\nclass Base(DeclarativeBase, Generic[CreateSchemaType, UpdateSchemaType]):\n    metadata = MetaData(naming_convention=naming_convention)\n    id: Mapped[PyUUID] = mapped_column(PGUUID, primary_key=True, default=uuid4)\n    created_at: Mapped[datetime] = mapped_column(\n        DateTime, default=datetime.now, nullable=False\n    )\n    updated_at: Mapped[datetime] = mapped_column(",
        "detail": "src.database.models",
        "documentation": {}
    },
    {
        "label": "UpdateSchemaType",
        "kind": 5,
        "importPath": "src.database.models",
        "description": "src.database.models",
        "peekOfCode": "UpdateSchemaType = TypeVar(\"UpdateSchemaType\", bound=BaseModel)\nSelectInloadT = str | Tuple[str, ...]\nclass Base(DeclarativeBase, Generic[CreateSchemaType, UpdateSchemaType]):\n    metadata = MetaData(naming_convention=naming_convention)\n    id: Mapped[PyUUID] = mapped_column(PGUUID, primary_key=True, default=uuid4)\n    created_at: Mapped[datetime] = mapped_column(\n        DateTime, default=datetime.now, nullable=False\n    )\n    updated_at: Mapped[datetime] = mapped_column(\n        DateTime,",
        "detail": "src.database.models",
        "documentation": {}
    },
    {
        "label": "SelectInloadT",
        "kind": 5,
        "importPath": "src.database.models",
        "description": "src.database.models",
        "peekOfCode": "SelectInloadT = str | Tuple[str, ...]\nclass Base(DeclarativeBase, Generic[CreateSchemaType, UpdateSchemaType]):\n    metadata = MetaData(naming_convention=naming_convention)\n    id: Mapped[PyUUID] = mapped_column(PGUUID, primary_key=True, default=uuid4)\n    created_at: Mapped[datetime] = mapped_column(\n        DateTime, default=datetime.now, nullable=False\n    )\n    updated_at: Mapped[datetime] = mapped_column(\n        DateTime,\n        default=datetime.now,",
        "detail": "src.database.models",
        "documentation": {}
    },
    {
        "label": "PaginatedResponse",
        "kind": 6,
        "importPath": "src.database.pagination",
        "description": "src.database.pagination",
        "peekOfCode": "class PaginatedResponse(BaseModel, Generic[T]):\n    items: List[T]\n    total: int\n    page: int\n    size: int\n    pages: int\n    has_next: bool\n    has_prev: bool\n    model_config = ConfigDict(from_attributes=True)\nclass PageParams:",
        "detail": "src.database.pagination",
        "documentation": {}
    },
    {
        "label": "PageParams",
        "kind": 6,
        "importPath": "src.database.pagination",
        "description": "src.database.pagination",
        "peekOfCode": "class PageParams:\n    def __init__(\n        self,\n        page: int = 1,\n        size: int = 100,\n        sort_by: Literal[\"created_at\", \"updated_at\"] | str = \"created_at\",\n        sort_order: Literal[\"asc\", \"desc\"] = \"desc\",\n    ):\n        self.page = page\n        self.size = size",
        "detail": "src.database.pagination",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "src.database.pagination",
        "description": "src.database.pagination",
        "peekOfCode": "T = TypeVar(\"T\")\nclass PaginatedResponse(BaseModel, Generic[T]):\n    items: List[T]\n    total: int\n    page: int\n    size: int\n    pages: int\n    has_next: bool\n    has_prev: bool\n    model_config = ConfigDict(from_attributes=True)",
        "detail": "src.database.pagination",
        "documentation": {}
    },
    {
        "label": "TokenBlacklist",
        "kind": 6,
        "importPath": "src.database.schemas",
        "description": "src.database.schemas",
        "peekOfCode": "class TokenBlacklist(BaseModel):\n    jti: str\n    token_type: str\n    user_id: PyUUID\n    expires_at: datetime",
        "detail": "src.database.schemas",
        "documentation": {}
    },
    {
        "label": "TestUserAuth",
        "kind": 6,
        "importPath": "tests.users.test_router",
        "description": "tests.users.test_router",
        "peekOfCode": "class TestUserAuth:\n    \"\"\"\n    Test class for user authentication functionality.\n    Tests cover:\n    - User registration (normal and admin users)\n    - Login with valid and invalid credentials\n    - Token-based authentication (access and refresh tokens)\n    - User profile retrieval\n    - Admin-only endpoint access control\n    - Token refresh mechanism",
        "detail": "tests.users.test_router",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 2,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "def client() -> Generator[TestClient, None, None]:\n    app.dependency_overrides[aget_db] = override_get_db\n    with TestClient(app) as c:\n        yield c\n@pytest.fixture\nasync def async_client() -> AsyncGenerator[AsyncClient, None]:\n    app.dependency_overrides[aget_db] = override_get_db\n    transport = ASGITransport(app=app)\n    async with AsyncClient(transport=transport, base_url=\"http://test\") as ac:\n        yield ac",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "TEST_DATABASE_URL",
        "kind": 5,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "TEST_DATABASE_URL = \"sqlite+aiosqlite:///./test.db\"\nengine = create_async_engine(\n    TEST_DATABASE_URL,\n    connect_args={\"check_same_thread\": False},\n)\nTestingSessionLocal = async_sessionmaker(\n    autocommit=False,\n    autoflush=False,\n    bind=engine,\n    class_=AsyncSession,",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "engine = create_async_engine(\n    TEST_DATABASE_URL,\n    connect_args={\"check_same_thread\": False},\n)\nTestingSessionLocal = async_sessionmaker(\n    autocommit=False,\n    autoflush=False,\n    bind=engine,\n    class_=AsyncSession,\n)",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "TestingSessionLocal",
        "kind": 5,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "TestingSessionLocal = async_sessionmaker(\n    autocommit=False,\n    autoflush=False,\n    bind=engine,\n    class_=AsyncSession,\n)\nasync def override_get_db() -> AsyncGenerator[AsyncSession, None]:\n    async with TestingSessionLocal() as session:\n        yield session\n@pytest.fixture(scope=\"session\", autouse=True)",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI(\n    title=\"Enerlytics\",\n    version=\"0.1.0\",\n    description=\"Electricity distribution analysis API.\",\n    lifespan=lifespan,\n)\n@app.get(\n    \"/\",\n    description=\"Root endpoint\",\n    status_code=status.HTTP_200_OK,",
        "detail": "main",
        "documentation": {}
    }
]